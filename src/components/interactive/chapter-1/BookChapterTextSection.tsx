
'use client';

import * as React from 'react';
import { P, H2, H3, Ul } from '@/components/content/ContentPageLayout';
import Image from 'next/image';
import { TextToSpeechPlayer } from '@/components/interactive/tts/TextToSpeechPlayer'; 
import { PlayCircle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface TextToSpeechPlayerRef {
  play: (text: string) => void;
  stop: () => void;
  isSpeaking: () => boolean;
  currentTextToSpeakRef?: React.MutableRefObject<string>; 
}

const getCleanTextFromDomNode = (node: Node): string => {
  if (!node) return '';
  let text = (node.textContent || '').replace(/\s+/g, ' ').trim();
  if (text) {
      const nodeNameUpper = node.nodeName.toUpperCase();
      if (nodeNameUpper === 'P' || nodeNameUpper === 'LI' || /^H[1-6]$/.test(nodeNameUpper) || nodeNameUpper === 'FIGCAPTION') {
          if (!text.endsWith('.') && !text.endsWith('?') && !text.endsWith('!')) {
               text += ". ";
          } else {
              text += " "; 
          }
      } else if (nodeNameUpper === "UL" || nodeNameUpper === "OL") {
        text += " ";
      }
      else {
          text += " "; 
      }
  }
  // console.log(`BookChapterTextSection (getCleanTextFromDomNode): NodeName: ${node.nodeName}, Extracted: "${text.substring(0,50)}..."`);
  return text;
};


interface TextWrapperProps {
  children: React.ReactNode;
  tag: keyof JSX.IntrinsicElements;
  onPlayClick: (element: HTMLElement) => void; 
  className?: string;
  elementRef?: React.RefObject<HTMLElement>; // Pass ref for the content element
}

const TextWrapper: React.FC<TextWrapperProps> = ({ children, tag: Tag, onPlayClick, className, elementRef }) => {
  const internalRef = React.useRef<HTMLElement>(null);
  const effectiveRef = elementRef || internalRef;


  const handlePlay = (event: React.MouseEvent) => {
    event.stopPropagation(); 
    if (effectiveRef.current) {
      onPlayClick(effectiveRef.current);
    } else {
      console.warn("TextWrapper: DOM element ref not available for onPlayClick.");
    }
  };
  // @ts-ignore
  return React.createElement(Tag, { 
    ref: effectiveRef,
    className: cn("group relative", className)
  }, (
    <>
      <button 
        onClick={handlePlay} 
        className="absolute -left-7 top-1/2 -translate-y-1/2 opacity-20 group-hover:opacity-100 focus:opacity-100 transition-opacity p-1 rounded-full hover:bg-accent/50 focus:bg-accent/50"
        aria-label="Озвучить этот фрагмент"
      >
        <PlayCircle size={20} className="text-primary" />
      </button>
      {children}
    </>
  ));
};


export function BookChapterTextSection() {
  const articleRef = React.useRef<HTMLElement>(null);
  const ttsPlayerRef = React.useRef<TextToSpeechPlayerRef>(null);
  const [fullArticleText, setFullArticleText] = React.useState('');
  const currentlyPlayingSegmentRef = React.useRef<HTMLElement | null>(null);

  // Stores references to all TextWrapper elements
  const textWrapperRefs = React.useRef<Map<number, HTMLElement | null>>(new Map());

  // Function to ensure a ref is available for a given index
  const getTextWrapperRef = (index: number) => {
    if (!textWrapperRefs.current.has(index)) {
      textWrapperRefs.current.set(index, null); // Initialize if not present
    }
    return (el: HTMLElement | null) => textWrapperRefs.current.set(index, el);
  };


  const extractTextFromDOMArticle = React.useCallback((rootElement: HTMLElement | null): string => {
    if (!rootElement) return "";
    let fullText = "";
    
    const textWrapperDivs = Array.from(rootElement.children) as HTMLElement[];
    console.log("BookChapterTextSection (extractTextFromDOMArticle): Found", textWrapperDivs.length, "TextWrapper divs (direct children of article).");

    textWrapperDivs.forEach((wrapperDiv) => {
      if (wrapperDiv.nodeType === Node.ELEMENT_NODE) {
        const contentChildNodes = Array.from(wrapperDiv.childNodes).filter(
          (n) => !(n.nodeName === 'BUTTON' || (n.nodeType === Node.ELEMENT_NODE && (n as HTMLElement).classList.contains('absolute')))
        );
        
        contentChildNodes.forEach(contentNode => {
          if (contentNode.nodeName === "UL" || contentNode.nodeName === "OL") {
            Array.from(contentNode.childNodes).forEach(li => {
              if (li.nodeName === "LI") {
                fullText += getCleanTextFromDomNode(li);
              }
            });
          } else if (contentNode.nodeName !== 'FIGURE' && contentNode.nodeName !== 'BLOCKQUOTE') { 
            fullText += getCleanTextFromDomNode(contentNode);
          }
        });
      }
    });
    const processedFullText = fullText.replace(/\s+/g, ' ').trim();
    console.log("BookChapterTextSection (extractTextFromDOMArticle): Final extracted full text for player (first 100 chars):", processedFullText.substring(0,100));
    return processedFullText;
  }, []);


  React.useEffect(() => {
    if (articleRef.current) {
      const extracted = extractTextFromDOMArticle(articleRef.current);
      setFullArticleText(extracted);
    }
  }, [extractTextFromDOMArticle]);


  const handleParagraphPlay = (clickedWrapperElement: HTMLElement) => {
    if (!articleRef.current || !ttsPlayerRef.current) {
      console.error("BookChapterTextSection (handleParagraphPlay): Article ref or TTS player ref not available.");
      return;
    }
  
    // If the player is currently speaking
    if (ttsPlayerRef.current.isSpeaking()) {
      const wasPlayingThisSegment = currentlyPlayingSegmentRef.current === clickedWrapperElement;
      console.log(`BookChapterTextSection: Player is speaking. Was playing this segment (${wasPlayingThisSegment})? Stopping current speech.`);
      ttsPlayerRef.current.stop();
      currentlyPlayingSegmentRef.current = null;
      if (wasPlayingThisSegment) {
        // If clicked on the same segment that was playing, just stop.
        return;
      }
      // If clicked on a *different* segment while playing, proceed to play the new one after a short delay
      // to allow the stop command to fully process.
      setTimeout(() => startPlayingFrom(clickedWrapperElement), 150);
      return;
    }
  
    // If player is not speaking, start playing from the clicked element.
    startPlayingFrom(clickedWrapperElement);
  };

  const startPlayingFrom = (startElement: HTMLElement) => {
    if (!articleRef.current || !ttsPlayerRef.current) return;

    currentlyPlayingSegmentRef.current = startElement;
    let textToPlay = "";
    let startReading = false;
    const allTextWrappers = Array.from(articleRef.current.children) as HTMLElement[];

    for (const wrapper of allTextWrappers) {
      if (wrapper === startElement) {
        startReading = true;
      }
      if (startReading) {
        const contentChildNodes = Array.from(wrapper.childNodes).filter(
          (n) => !(n.nodeName === 'BUTTON' || (n.nodeType === Node.ELEMENT_NODE && (n as HTMLElement).classList.contains('absolute')))
        );
        contentChildNodes.forEach(contentNode => {
          if (contentNode.nodeName === "UL" || contentNode.nodeName === "OL") {
            Array.from(contentNode.childNodes).forEach(li => {
              if (li.nodeName === "LI") {
                textToPlay += getCleanTextFromDomNode(li);
              }
            });
          } else if (contentNode.nodeName !== 'FIGURE' && contentNode.nodeName !== 'BLOCKQUOTE') { 
            textToPlay += getCleanTextFromDomNode(contentNode);
          }
        });
      }
    }
    
    const finalTextToPlay = textToPlay.replace(/\s+/g, ' ').trim();
    if (finalTextToPlay) {
      console.log("BookChapterTextSection (startPlayingFrom): Playing text from element:", startElement, "Full text to play:", finalTextToPlay.substring(0,100)+"...");
      ttsPlayerRef.current.play(finalTextToPlay);
      if (ttsPlayerRef.current.currentTextToSpeakRef) {
          ttsPlayerRef.current.currentTextToSpeakRef.current = finalTextToPlay;
      }
    } else {
      console.warn("BookChapterTextSection (startPlayingFrom): No text extracted from element:", startElement);
      ttsPlayerRef.current.stop();
    }
  };
  
  // Helper for creating unique keys for wrapped elements
  let elementKeyCounter = 0;

  const WrappedP: React.FC<{children: React.ReactNode, className?: string}> = ({ children, className }) => {
    const key = React.useMemo(() => `p-${elementKeyCounter++}`, []);
    const ref = React.useRef<HTMLDivElement>(null);
    return <TextWrapper tag="div" elementRef={ref} onPlayClick={handleParagraphPlay} className={className}><P>{children}</P></TextWrapper>;
  };
  const WrappedH2: React.FC<{children: React.ReactNode, className?: string}> = ({ children, className }) => {
    const key = React.useMemo(() => `h2-${elementKeyCounter++}`, []);
    const ref = React.useRef<HTMLDivElement>(null);
    return <TextWrapper tag="div" elementRef={ref} onPlayClick={handleParagraphPlay} className={className}><H2>{children}</H2></TextWrapper>;
  };
  const WrappedH3: React.FC<{children: React.ReactNode, className?: string}> = ({ children, className }) => {
    const key = React.useMemo(() => `h3-${elementKeyCounter++}`, []);
    const ref = React.useRef<HTMLDivElement>(null);
    return <TextWrapper tag="div" elementRef={ref} onPlayClick={handleParagraphPlay} className={className}><H3>{children}</H3></TextWrapper>;
  };
  
  const WrappedUl: React.FC<{items: React.ReactNode[], className?: string}> = ({ items, className }) => {
    const key = React.useMemo(() => `ul-${elementKeyCounter++}`, []);
    const ref = React.useRef<HTMLDivElement>(null);
    return (
    <TextWrapper tag="div" elementRef={ref} onPlayClick={handleParagraphPlay} className={className}>
      <Ul items={
        items.map((item, index) => (
          <React.Fragment key={index}>{item}</React.Fragment> 
        ))
      } />
    </TextWrapper>
    );
  };


  return (
    <>
      <TextToSpeechPlayer ref={ttsPlayerRef} initialTextToSpeak={fullArticleText} className="mb-6 sticky top-16 z-20 backdrop-blur-sm bg-background/80 -mx-4 -mt-4 p-4 border-b" />
      <article ref={articleRef} className="prose prose-lg mx-auto max-w-3xl py-8 text-foreground dark:prose-invert dark:text-foreground">
        
        <WrappedH2>(Не)безопасность веб-приложений</WrappedH2>
        <WrappedP>
          Нет сомнений в том, что безопасность веб-приложений — актуальная и широко обсуждаемая тема. Ставки высоки для всех заинтересованных сторон: для компаний, получающих все больший доход от интернет-коммерции, для пользователей, доверяющих веб-приложениям конфиденциальную информацию, и для преступников, которые могут заработать большие деньги, крадя платежные данные или компрометируя банковские счета. Репутация играет решающую роль. Мало кто захочет иметь дело с небезопасным веб-сайтом, поэтому немногие организации готовы раскрывать подробности о собственных уязвимостях или нарушениях безопасности. Следовательно, получить достоверную информацию о состоянии безопасности веб-приложений сегодня — задача нетривиальная.
        </WrappedP>
        <WrappedP>
          В этой главе мы кратко рассмотрим эволюцию веб-приложений и многочисленные преимущества, которые они предоставляют. Мы представим некоторые метрики уязвимостей в современных веб-приложениях, основанные на непосредственном опыте авторов и демонстрирующие, что большинство приложений далеки от безопасности. Мы опишем основную проблему безопасности, с которой сталкиваются веб-приложения, — возможность пользователей предоставлять произвольные входные данные, — а также различные факторы, способствующие их слабой защищенности. Наконец, мы опишем последние тенденции в области безопасности веб-приложений и то, как они могут развиваться в ближайшем будущем.
        </WrappedP>

        <WrappedH3>Эволюция веб-приложений</WrappedH3>
        <WrappedP>
          В ранние дни Интернета Всемирная паутина состояла только из веб-сайтов. По сути, это были информационные хранилища, содержащие статические документы. Веб-браузеры были изобретены как средство для извлечения и отображения этих документов, как показано на Рисунке 1-1. Поток интересной информации был однонаправленным — от сервера к браузеру. Большинство сайтов не аутентифицировали пользователей, так как в этом не было необходимости. К каждому пользователю относились одинаково и предоставляли одинаковую информацию. Любые угрозы безопасности, возникающие при размещении веб-сайта, были в основном связаны с уязвимостями в программном обеспечении веб-сервера (которых было много). Если злоумышленник взламывал веб-сервер, он обычно не получал доступ к какой-либо конфиденциальной информации, поскольку информация, хранящаяся на сервере, уже была общедоступной. Скорее, злоумышленник обычно изменял файлы на сервере, чтобы испортить содержимое веб-сайта или использовать хранилище и пропускную способность сервера для распространения «вареза» (пиратского ПО).
        </WrappedP>
        <figure className="my-6 text-center">
          <Image
            src="https://placehold.co/600x300.png" 
            alt="Традиционный веб-сайт со статической информацией"
            width={600}
            height={300}
            className="mx-auto rounded-md shadow-md"
            data-ai-hint="static website diagram"
          />
          <figcaption className="mt-2 text-sm text-muted-foreground">
            <em>Рисунок 1-1: Традиционный веб-сайт, содержащий статическую информацию</em>
          </figcaption>
        </figure>
        <WrappedP>
          Сегодня Всемирная паутина почти неузнаваема по сравнению с ее прежним видом. Большинство сайтов в сети на самом деле являются приложениями (см. Рисунок 1-2). Они обладают высокой функциональностью и полагаются на двусторонний поток информации между сервером и браузером. Они поддерживают регистрацию и вход в систему, финансовые транзакции, поиск и создание контента пользователями. Контент, представляемый пользователям, генерируется динамически «на лету» и часто адаптируется для каждого конкретного пользователя. Большая часть обрабатываемой информации является частной и строго конфиденциальной. Поэтому безопасность — это большая проблема. Никто не захочет использовать веб-приложение, если считает, что его информация будет раскрыта посторонним лицам.
        </WrappedP>
        <figure className="my-6 text-center">
          <Image
            src="https://placehold.co/600x300.png" 
            alt="Типичное веб-приложение с динамическим контентом"
            width={600}
            height={300}
            className="mx-auto rounded-md shadow-md"
            data-ai-hint="web application diagram"
          />
          <figcaption className="mt-2 text-sm text-muted-foreground">
            <em>Рисунок 1-2: Типичное веб-приложение</em>
          </figcaption>
        </figure>
        <WrappedP>
          Веб-приложения несут с собой новые и значительные угрозы безопасности. Каждое приложение уникально и может содержать свои уязвимости. Большинство приложений разрабатываются собственными силами — многие разработчиками, которые лишь частично понимают проблемы безопасности, которые могут возникнуть в создаваемом ими коде. Для обеспечения своей основной функциональности веб-приложениям обычно требуется подключение к внутренним компьютерным системам, содержащим строго конфиденциальные данные и способным выполнять мощные бизнес-функции. Пятнадцать лет назад, если вы хотели совершить денежный перевод, вы шли в банк, и кассир выполнял перевод за вас; сегодня вы можете зайти в веб-приложение и выполнить перевод самостоятельно. Злоумышленник, взломавший веб-приложение, может украсть личную информацию, осуществить финансовое мошенничество и совершить вредоносные действия против других пользователей.
        </WrappedP>

        <WrappedH3>Распространенные функции веб-приложений</WrappedH3>
        <WrappedP>
          Веб-приложения были созданы для выполнения практически любой полезной функции, которую только можно реализовать онлайн. Вот некоторые функции веб-приложений, которые приобрели особую популярность в последние годы:
        </WrappedP>
        <WrappedUl items={[
          "Покупки (Amazon)",
          "Социальные сети (Facebook)",
          "Банковские услуги (Citibank)",
          "Веб-поиск (Google)",
          "Аукционы (eBay)",
          "Азартные игры (Betfair)",
          "Веб-логи (Blogger)",
          "Веб-почта (Gmail)",
          "Интерактивная информация (Wikipedia)"
        ]} />
        <WrappedP>
          Приложения, доступ к которым осуществляется с помощью компьютерного браузера, все чаще пересекаются с мобильными приложениями, доступ к которым осуществляется с помощью смартфона или планшета. Большинство мобильных приложений используют либо браузер, либо специализированный клиент, который использует API на основе HTTP для связи с сервером. Функции и данные приложений обычно являются общими для различных интерфейсов, которые приложение предоставляет для разных пользовательских платформ.
        </WrappedP>
        <WrappedP>
          Помимо общедоступного Интернета, веб-приложения получили широкое распространение внутри организаций для поддержки ключевых бизнес-функций. Многие из них предоставляют доступ к строго конфиденциальным данным и функциям:
        </WrappedP>
        <WrappedUl items={[
          "HR-приложения, позволяющие пользователям получать доступ к информации о заработной плате, давать и получать обратную связь по результатам работы, а также управлять процедурами найма и дисциплинарными взысканиями.",
          "Административные интерфейсы к ключевой инфраструктуре, такой как веб- и почтовые серверы, рабочие станции пользователей и администрирование виртуальных машин.",
          "Программное обеспечение для совместной работы, используемое для обмена документами, управления рабочими процессами и проектами, а также отслеживания проблем. Эти типы функциональности часто связаны с критически важными вопросами безопасности и управления, и организации часто полностью полагаются на средства контроля, встроенные в их веб-приложения.",
          "Бизнес-приложения, такие как программное обеспечение для планирования ресурсов предприятия (ERP), доступ к которым ранее осуществлялся с помощью проприетарного «толстого» клиентского приложения, теперь могут быть доступны через веб-браузер.",
          "Программные сервисы, такие как электронная почта, которые первоначально требовали отдельного почтового клиента, теперь могут быть доступны через веб-интерфейсы, такие как Outlook Web Access.",
          "Традиционные настольные офисные приложения, такие как текстовые процессоры и электронные таблицы, были перенесены в веб-приложения с помощью таких сервисов, как Google Apps и Microsoft Office Live."
        ]} />
        <WrappedP>
          Во всех этих примерах то, что воспринимается как «внутренние» приложения, все чаще размещается извне, поскольку организации переходят к сторонним поставщикам услуг для сокращения затрат. В этих так называемых облачных решениях критически важные для бизнеса функции и данные становятся доступными для более широкого круга потенциальных злоумышленников, и организации все больше зависят от надежности средств защиты, находящихся вне их контроля.
        </WrappedP>
        <WrappedP>
          Быстро приближается время, когда единственным клиентским программным обеспечением, которое понадобится большинству пользователей компьютеров, будет веб-браузер. Разнообразный набор функций будет реализован с использованием общего набора протоколов и технологий, и при этом унаследует характерный набор общих уязвимостей безопасности.
        </WrappedP>

        <WrappedH3>Преимущества веб-приложений</WrappedH3>
        <WrappedP>
          Нетрудно понять, почему веб-приложения приобрели такую ​​огромную популярность. Несколько технических факторов, наряду с очевидными коммерческими стимулами, способствовали революции в том, как мы используем Интернет:
        </WrappedP>
        <WrappedUl items={[
          "HTTP, основной протокол связи, используемый для доступа к Всемирной паутине, является легковесным и не требующим установления соединения. Это обеспечивает отказоустойчивость в случае ошибок связи и избавляет сервер от необходимости поддерживать открытое сетевое соединение с каждым пользователем, как это было во многих устаревших клиент-серверных приложениях. HTTP также может проксироваться и туннелироваться через другие протоколы, обеспечивая безопасную связь в любой сетевой конфигурации.",
          "У каждого веб-пользователя уже установлен браузер на его компьютере и мобильном устройстве. Веб-приложения динамически развертывают свой пользовательский интерфейс в браузере, что избавляет от необходимости распространять и управлять отдельным клиентским программным обеспечением, как это было в до-веб-приложениях. Изменения в интерфейсе необходимо реализовывать только один раз, на сервере, и они вступают в силу немедленно.",
          "Современные браузеры обладают высокой функциональностью, что позволяет создавать насыщенные и удобные пользовательские интерфейсы. Веб-интерфейсы используют стандартные элементы навигации и ввода, которые сразу знакомы пользователям, что избавляет от необходимости изучать, как работает каждое отдельное приложение. Клиентские сценарии позволяют приложениям переносить часть своей обработки на сторону клиента, а возможности браузеров при необходимости можно произвольно расширять с помощью технологий расширения браузера.",
          "Основные технологии и языки, используемые для разработки веб-приложений, относительно просты. Доступен широкий спектр платформ и инструментов разработки, облегчающих создание мощных приложений начинающими разработчиками, а также большое количество открытого исходного кода и других ресурсов, доступных для включения в создаваемые на заказ приложения."
        ]} />

        <WrappedH3>Безопасность веб-приложений</WrappedH3>
        <WrappedP>
          Как и любой новый класс технологий, веб-приложения принесли с собой новый спектр уязвимостей безопасности. Набор наиболее часто встречающихся дефектов со временем несколько изменился. Были разработаны новые атаки, которые не учитывались при разработке существующих приложений. Некоторые проблемы стали менее распространенными по мере повышения осведомленности о них. Были разработаны новые технологии, которые открыли новые возможности для эксплуатации. Некоторые категории недостатков в значительной степени исчезли в результате изменений, внесенных в программное обеспечение веб-браузеров.
        </WrappedP>
        <WrappedP>
          Наиболее серьезными атаками на веб-приложения являются те, которые раскрывают конфиденциальные данные или получают неограниченный доступ к внутренним системам, на которых работает приложение. Компрометации такого рода с высоким резонансом продолжают происходить часто. Однако для многих организаций любая атака, вызывающая простой системы, является критическим событием. Атаки типа «отказ в обслуживании» на уровне приложений могут использоваться для достижения тех же результатов, что и традиционные атаки на исчерпание ресурсов инфраструктуры. Однако они часто используются с более тонкими техниками и целями. Их можно использовать для нарушения работы конкретного пользователя или службы с целью получения конкурентного преимущества перед коллегами в сферах финансовой торговли, игр, онлайн-торгов и бронирования билетов.
        </WrappedP>
        <WrappedP>
          На протяжении всей этой эволюции компрометации известных веб-приложений оставались в новостях. Нет ощущения, что наступил переломный момент и что эти проблемы безопасности идут на убыль. В некоторой степени безопасность веб-приложений сегодня является наиболее значительным полем битвы между злоумышленниками и теми, кто защищает компьютерные ресурсы и данные, и, вероятно, останется таковой в обозримом будущем.
        </WrappedP>

        <WrappedH3>«Этот сайт безопасен»</WrappedH3>
        <WrappedP>
          Существует широкое понимание того, что безопасность является проблемой для веб-приложений. Загляните на страницу часто задаваемых вопросов типичного приложения, и вас заверят, что оно на самом деле безопасно.
        </WrappedP>
        <WrappedP>
          Большинство приложений заявляют, что они безопасны, потому что используют SSL. Например:
        </WrappedP>
        <blockquote className="border-l-4 border-muted pl-4 italic my-4 text-muted-foreground">
          Этот сайт абсолютно безопасен. Он был разработан с использованием 128-битной технологии Secure Socket Layer (SSL) для предотвращения несанкционированного просмотра вашей информации посторонними пользователями. Вы можете использовать этот сайт со спокойной душой, зная, что ваши данные у нас в безопасности.
        </blockquote>
        <WrappedP>
          Пользователей часто призывают проверить сертификат сайта, восхититься используемыми передовыми криптографическими протоколами и на этом основании доверить ему свою личную информацию.
        </WrappedP>
        <WrappedP>
          Все чаще организации также ссылаются на свое соответствие стандартам индустрии платежных карт (PCI), чтобы заверить пользователей в своей безопасности. Например:
        </WrappedP>
        <blockquote className="border-l-4 border-muted pl-4 italic my-4 text-muted-foreground">
          Мы очень серьезно относимся к безопасности. Наш веб-сайт ежедневно сканируется, чтобы гарантировать, что мы остаемся совместимыми с PCI и защищены от хакеров. Вы можете увидеть дату последнего сканирования на логотипе ниже, и вам гарантируется, что наш веб-сайт безопасен для использования.
        </blockquote>
        <WrappedP>
          На самом деле, большинство веб-приложений небезопасны, несмотря на широкое использование технологии SSL и внедрение регулярного PCI-сканирования. Авторы этой книги за последние годы протестировали сотни веб-приложений. На Рисунке 1-3 показано, какой процент приложений, протестированных в 2007 и 2011 годах, был затронут некоторыми распространенными категориями уязвимостей:
        </WrappedP>
        <WrappedUl items={[
          "Нарушение аутентификации (62%) — эта категория уязвимостей включает различные дефекты в механизме входа в приложение, которые могут позволить злоумышленнику угадать слабые пароли, запустить атаку методом перебора или обойти вход в систему.",
          "Нарушение контроля доступа (71%) — это случаи, когда приложение не может должным образом защитить доступ к своим данным и функциям, что потенциально позволяет злоумышленнику просматривать конфиденциальные данные других пользователей, хранящиеся на сервере, или выполнять привилегированные действия.",
          "SQL-инъекция (32%) — эта уязвимость позволяет злоумышленнику отправлять специально созданные входные данные для вмешательства во взаимодействие приложения с внутренними базами данных. Злоумышленник может получить произвольные данные из приложения, вмешаться в его логику или выполнить команды на самом сервере базы данных.",
          "Межсайтовый скриптинг (XSS) (94%) — эта уязвимость позволяет злоумышленнику атаковать других пользователей приложения, потенциально получая доступ к их данным, выполняя несанкционированные действия от их имени или осуществляя другие атаки против них.",
          "Утечка информации (78%) — это случаи, когда приложение разглашает конфиденциальную информацию, полезную для злоумышленника при разработке атаки на приложение, из-за некорректной обработки ошибок или другого поведения.",
          "Межсайтовая подделка запроса (CSRF) (92%) — этот недостаток означает, что пользователей приложения можно побудить к выполнению непреднамеренных действий в приложении в контексте их пользователя и уровня привилегий. Уязвимость позволяет вредоносному веб-сайту, посещенному пользователем-жертвой, взаимодействовать с приложением для выполнения действий, которые пользователь не намеревался совершать."
        ]} />
        <figure className="my-8 text-center">
          <Image
            src="https://placehold.co/700x450.png" 
            alt="Статистика распространенности уязвимостей веб-приложений"
            width={700}
            height={450}
            className="mx-auto rounded-md shadow-md"
            data-ai-hint="vulnerability statistics chart"
          />
          <figcaption className="mt-2 text-sm text-muted-foreground">
            <em>Рисунок 1-3: Распространенность некоторых распространенных уязвимостей веб-приложений<br />в приложениях, недавно протестированных авторами (на основе выборки из более чем 100)</em>
          </figcaption>
        </figure>
        <WrappedP>
          SSL — отличная технология, которая защищает конфиденциальность и целостность данных при передаче между браузером пользователя и веб-сервером. Она помогает защититься от перехватчиков и может предоставить пользователю уверенность в подлинности веб-сервера, с которым он имеет дело. Но она не останавливает атаки, которые напрямую нацелены на серверные или клиентские компоненты приложения, как это делают большинство успешных атак. В частности, она не предотвращает ни одну из только что перечисленных уязвимостей или многие другие, которые могут сделать приложение критически уязвимым для атак. Независимо от того, используют ли они SSL, большинство веб-приложений по-прежнему содержат недостатки безопасности.
        </WrappedP>

        <WrappedH3>Основная проблема безопасности: пользователи могут отправлять произвольные входные данные</WrappedH3>
        <WrappedP>
          Как и большинство распределенных приложений, веб-приложения сталкиваются с фундаментальной проблемой, которую они должны решить, чтобы быть безопасными. Поскольку клиент находится вне контроля приложения, пользователи могут отправлять произвольные входные данные на серверную часть приложения. Приложение должно предполагать, что все входные данные потенциально вредоносны. Поэтому оно должно принимать меры для обеспечения того, чтобы злоумышленники не могли использовать специально созданные входные данные для компрометации приложения путем вмешательства в его логику и поведение, тем самым получая несанкционированный доступ к его данным и функциям.
        </WrappedP>
        <WrappedP>
          Эта основная проблема проявляется различными способами:
        </WrappedP>
        <WrappedUl items={[
          "Пользователи могут вмешиваться в любые данные, передаваемые между клиентом и сервером, включая параметры запроса, файлы cookie и заголовки HTTP. Любые средства контроля безопасности, реализованные на стороне клиента, такие как проверки входных данных, могут быть легко обойдены.",
          "Пользователи могут отправлять запросы в любой последовательности и могут отправлять параметры на другом этапе, чем ожидает приложение, более одного раза или вообще не отправлять. Любое предположение разработчиков о том, как пользователи будут взаимодействовать с приложением, может быть нарушено.",
          "Пользователи не ограничены использованием только веб-браузера для доступа к приложению. Существует множество широко доступных инструментов, работающих вместе с браузером или независимо от него, которые помогают атаковать веб-приложения. Эти инструменты могут делать запросы, которые обычный браузер никогда бы не сделал, и могут быстро генерировать огромное количество запросов для поиска и использования проблем."
        ]} />
        <WrappedP>
          Большинство атак на веб-приложения включают отправку на сервер входных данных, созданных таким образом, чтобы вызвать какое-либо событие, которое не ожидалось или не желалось разработчиком приложения. Вот несколько примеров отправки специально созданных входных данных для достижения этой цели:
        </WrappedP>
        <WrappedUl items={[
          "Изменение цены продукта, передаваемой в скрытом поле HTML-формы, для мошеннической покупки продукта по более низкой цене.",
          "Изменение токена сеанса, передаваемого в файле cookie HTTP, для перехвата сеанса другого аутентифицированного пользователя.",
          "Удаление определенных параметров, которые обычно отправляются, для использования логической ошибки в обработке приложения.",
          "Изменение некоторых входных данных, которые будут обработаны внутренней базой данных, для внедрения вредоносного запроса к базе данных и доступа к конфиденциальным данным."
        ]} />
        <WrappedP>
          Излишне говорить, что SSL ничего не делает, чтобы помешать злоумышленнику отправить на сервер специально созданные входные данные. Если приложение использует SSL, это просто означает, что другие пользователи в сети не могут просматривать или изменять данные злоумышленника при передаче. Поскольку злоумышленник контролирует свой конец SSL-туннеля, он может отправлять на сервер все, что ему угодно, через этот туннель. Если какая-либо из ранее упомянутых атак будет успешной, приложение будет категорически уязвимым, независимо от того, что может быть сказано в его FAQ.
        </WrappedP>

        <WrappedH3>Ключевые факторы проблемы</WrappedH3>
        <WrappedP>
          Основная проблема безопасности, с которой сталкиваются веб-приложения, возникает в любой ситуации, когда приложение должно принимать и обрабатывать недоверенные данные, которые могут быть вредоносными. Однако в случае веб-приложений несколько факторов усугубили проблему и объясняют, почему так много веб-приложений в Интернете сегодня так плохо справляются с ней.
        </WrappedP>
        <WrappedP><strong>Недостаточный уровень осведомленности о безопасности</strong></WrappedP>
        <WrappedP>
          Хотя осведомленность о проблемах безопасности веб-приложений в последние годы выросла, она остается менее развитой, чем в более давно существующих областях, таких как сети и операционные системы. Хотя большинство людей, работающих в сфере ИТ-безопасности, достаточно хорошо разбираются в основах защиты сетей и укрепления хостов, все еще существует повсеместное замешательство и неправильное понимание многих основных концепций, связанных с безопасностью веб-приложений. Работа разработчика веб-приложений все чаще включает в себя объединение десятков, а то и сотен сторонних пакетов, предназначенных для абстрагирования разработчика от базовых технологий. Нередко можно встретить опытных разработчиков веб-приложений, которые делают серьезные предположения о безопасности, обеспечиваемой их программной средой, и для которых объяснение многих основных типов недостатков становится откровением.
        </WrappedP>
        <WrappedP><strong>Разработка на заказ</strong></WrappedP>
        <WrappedP>
          Большинство веб-приложений разрабатываются собственными силами организации или сторонними подрядчиками. Даже если в приложении используются хорошо зарекомендовавшие себя компоненты, они обычно настраиваются или объединяются с помощью нового кода. В этой ситуации каждое приложение уникально и может содержать свои собственные уникальные дефекты. Это контрастирует с типичным развертыванием инфраструктуры, при котором организация может приобрести лучший в своем классе продукт и установить его в соответствии с отраслевыми стандартами.
        </WrappedP>
        <WrappedP><strong>Обманчивая простота</strong></WrappedP>
        <WrappedP>
          С современными платформами и инструментами разработки веб-приложений начинающий программист может создать мощное приложение с нуля за короткий промежуток времени. Но существует огромная разница между созданием функционального кода и безопасного кода.
          Многие веб-приложения создаются людьми с благими намерениями, которым просто не хватает знаний и опыта, чтобы определить, где могут возникнуть проблемы с безопасностью.
        </WrappedP>
        <WrappedP>
          Заметной тенденцией последних лет стало использование фреймворков приложений, предоставляющих готовые компоненты кода для обработки многочисленных общих областей функциональности, таких как аутентификация, шаблоны страниц, доски сообщений и интеграция с общими компонентами серверной инфраструктуры. Примерами таких фреймворков являются Liferay и Appfuse. Эти продукты позволяют быстро и легко создавать работающие приложения, не требуя технического понимания того, как работают приложения или какие потенциальные риски они могут содержать. Это также означает, что многие компании используют одни и те же фреймворки. Таким образом, при обнаружении уязвимости она затрагивает множество несвязанных приложений.
        </WrappedP>
        <WrappedP><strong>Быстро меняющийся профиль угроз</strong></WrappedP>
        <WrappedP>
          Исследования в области атак на веб-приложения и их защиты продолжают оставаться процветающей областью, в которой новые концепции и угрозы появляются быстрее, чем это происходит сейчас для более старых технологий. Особенно на стороне клиента, нередко общепринятые средства защиты от конкретной атаки подрываются исследованиями, демонстрирующими новую технику атаки. Команда разработчиков, которая начинает проект с полным знанием текущих угроз, может потерять этот статус к моменту завершения и развертывания приложения.
        </WrappedP>
        <WrappedP><strong>Ограничения ресурсов и времени</strong></WrappedP>
        <WrappedP>
          Большинство проектов по разработке веб-приложений подвержены строгим ограничениям по времени и ресурсам, возникающим из-за экономики внутренней, разовой разработки. В большинстве организаций часто невозможно нанять выделенных специалистов по безопасности в команды проектирования или разработки. А из-за срыва сроков проекта тестирование безопасности специалистами часто откладывается на очень поздний этап жизненного цикла проекта. При балансировании конкурирующих приоритетов необходимость создания стабильного и функционального приложения к установленному сроку обычно преобладает над менее ощутимыми соображениями безопасности. Типичная небольшая организация может быть готова заплатить всего за несколько человеко-дней консультационных услуг для оценки нового приложения. Быстрый тест на проникновение часто находит «низко висящие плоды», но может пропустить более тонкие уязвимости, для выявления которых требуется время и терпение.
        </WrappedP>
        <WrappedP><strong>Чрезмерно расширенные технологии</strong></WrappedP>
        <WrappedP>
          Многие из основных технологий, используемых в веб-приложениях, зародились, когда ландшафт Всемирной паутины был совсем другим. С тех пор их значительно расширили за пределы целей, для которых они изначально предназначались, например, использование JavaScript в качестве средства передачи данных во многих приложениях на основе AJAX.
          Поскольку ожидания от функциональности веб-приложений быстро росли, технологии, используемые для реализации этой функциональности, отставали, а старые технологии растягивались и адаптировались для удовлетворения новых требований. Неудивительно, что это привело к уязвимостям безопасности по мере появления непредвиденных побочных эффектов.
        </WrappedP>
        <WrappedP><strong>Растущие требования к функциональности</strong></WrappedP>
        <WrappedP>
          Приложения разрабатываются в первую очередь с учетом функциональности и удобства использования. Некогда статичные профили пользователей теперь содержат функции социальных сетей, позволяющие загружать изображения и редактировать страницы в стиле вики. Несколько лет назад разработчик приложения мог удовлетвориться реализацией запроса имени пользователя и пароля для создания функции входа в систему. Современные сайты могут включать восстановление пароля, восстановление имени пользователя, подсказки пароля и возможность запоминания имени пользователя и пароля при последующих посещениях. Такой сайт, несомненно, будет позиционироваться как имеющий многочисленные функции безопасности, однако каждая из них на самом деле является функцией самообслуживания, увеличивающей поверхность атаки сайта.
        </WrappedP>

        <WrappedH3>Новый периметр безопасности</WrappedH3>
        <WrappedP>
          До появления веб-приложений усилия организаций по защите от внешних атак были в основном сосредоточены на сетевом периметре. Защита этого периметра подразумевала усиление защиты и установку исправлений для служб, которые необходимо было предоставить, и ограничение доступа к другим с помощью межсетевых экранов.
        </WrappedP>
        <WrappedP>
          Веб-приложения все это изменили. Чтобы приложение было доступно пользователям, межсетевой экран периметра должен разрешать входящие подключения к серверу по протоколу HTTP или HTTPS. А для функционирования приложения серверу должен быть разрешен доступ к поддерживающим внутренним системам, таким как базы данных, мейнфреймы, а также финансовые и логистические системы. Эти системы часто лежат в основе операций организации и находятся за несколькими уровнями защиты на сетевом уровне.
        </WrappedP>
        <WrappedP>
          Если в веб-приложении существует уязвимость, злоумышленник из общедоступного Интернета может скомпрометировать основные внутренние системы организации, просто отправив специально созданные данные из своего веб-браузера. Эти данные проходят мимо всех сетевых защит организации так же, как и обычный, безвредный трафик к веб-приложению.
        </WrappedP>
        <WrappedP>
          Эффект от широкого распространения веб-приложений заключается в том, что периметр безопасности типичной организации сместился. Часть этого периметра по-прежнему воплощена в межсетевых экранах и бастионных хостах. Но значительная его часть теперь занята веб-приложениями организации. Из-за многообразия способов, которыми веб-приложения получают пользовательский ввод и передают его на конфиденциальные внутренние системы, они являются потенциальными шлюзами для широкого спектра атак, и защита от этих атак должна быть реализована в самих приложениях. Одна
          строка дефектного кода в одном веб-приложении может сделать внутренние системы организации уязвимыми. Кроме того, с ростом популярности гибридных приложений, сторонних виджетов и других методов междоменной интеграции периметр безопасности на стороне сервера часто выходит далеко за пределы самой организации. Неявное доверие оказывается службам внешних приложений и сервисов. Статистика, описанная ранее, о распространенности уязвимостей в этом новом периметре безопасности, должна заставить каждую организацию задуматься.
        </WrappedP>
        <WrappedP><strong>ПРИМЕЧАНИЕ</strong> Для злоумышленника, нацеленного на организацию, получение доступа к сети или выполнение произвольных команд на серверах может быть не тем, чего он хочет достичь. Часто, и, возможно, как правило, злоумышленник на самом деле хочет выполнить какое-либо действие на уровне приложения, такое как кража личной информации, перевод средств или совершение дешевых покупок. И перемещение периметра безопасности на уровень приложения может значительно помочь злоумышленнику в достижении этих целей.</WrappedP>
        <WrappedP>
          Например, предположим, что злоумышленник хочет «взломать» системы банка и украсть деньги со счетов пользователей. В прошлом, до того как банк развернул веб-приложение, злоумышленнику, возможно, потребовалось бы найти уязвимость в общедоступной службе, использовать ее для получения точки опоры в демилитаризованной зоне банка, проникнуть через межсетевой экран, ограничивающий доступ к его внутренним системам, составить карту сети, чтобы найти мэйнфрейм, расшифровать непонятный протокол, используемый для доступа к нему, и угадать какие-либо учетные данные для входа в систему. Однако, если банк теперь развертывает уязвимое веб-приложение, злоумышленник может достичь того же результата, просто изменив номер счета в скрытом поле HTML-формы.
        </WrappedP>
        <WrappedP>
          Второй способ, которым веб-приложения сместили периметр безопасности, связан с угрозами, с которыми сталкиваются сами пользователи при доступе к уязвимому приложению. Вредоносный злоумышленник может использовать безвредное, но уязвимое веб-приложение для атаки на любого пользователя, который его посещает. Если этот пользователь находится во внутренней корпоративной сети, злоумышленник может использовать браузер пользователя для запуска атаки на локальную сеть с доверенной позиции пользователя. Без какого-либо содействия со стороны пользователя злоумышленник может выполнить любое действие, которое мог бы выполнить пользователь, если бы он сам был злоумышленником. С распространением технологий расширения браузера и плагинов степень поверхности атаки на стороне клиента значительно возросла.
        </WrappedP>
        <WrappedP>
          Сетевые администраторы знакомы с идеей предотвращения посещения их пользователями вредоносных веб-сайтов, и сами конечные пользователи постепенно становятся более осведомленными об этой угрозе. Но природа уязвимостей веб-приложений такова, что уязвимое приложение может представлять не меньшую угрозу для своих пользователей и их организации, чем веб-сайт, который является откровенно вредоносным. Соответственно, новый периметр безопасности налагает на всех владельцев приложений обязанность по защите своих пользователей от атак, направленных против них через приложение.
          Еще один способ, которым периметр безопасности частично переместился на сторону клиента, — это широкое использование электронной почты в качестве расширенного механизма аутентификации. Огромное количество современных приложений содержат функции «забыли пароль», которые позволяют злоумышленнику сгенерировать электронное письмо для восстановления учетной записи на любой зарегистрированный адрес, не требуя никакой другой информации, специфичной для пользователя. Это позволяет злоумышленнику, который скомпрометировал учетную запись веб-почты пользователя, легко эскалировать атаку и скомпрометировать учетные записи жертвы в большинстве веб-приложений, для которых жертва зарегистрирована.
        </WrappedP>

        <WrappedH3>Будущее безопасности веб-приложений</WrappedH3>
        <WrappedP>
          Спустя более десятилетия после их широкого внедрения веб-приложения в Интернете сегодня все еще изобилуют уязвимостями. Понимание угроз безопасности, с которыми сталкиваются веб-приложения, и эффективные способы их устранения все еще недостаточно развиты в отрасли. В настоящее время мало что указывает на то, что проблемные факторы, описанные в этой главе, исчезнут в ближайшем будущем.
        </WrappedP>
        <WrappedP>
          Тем не менее, детали ландшафта безопасности веб-приложений не статичны. Несмотря на то, что старые и хорошо изученные уязвимости, такие как SQL-инъекции, продолжают появляться, их распространенность постепенно уменьшается. Кроме того, оставшиеся экземпляры становится все труднее найти и использовать. Новые исследования в этих областях, как правило, сосредоточены на разработке передовых методов атаки на более тонкие проявления уязвимостей, которые несколько лет назад можно было легко обнаружить и использовать, используя только браузер.
        </WrappedP>
        <WrappedP>
          Второй заметной тенденцией стал постепенный сдвиг внимания от атак на серверную часть приложения к атакам, нацеленным на пользователей приложения. Последний вид атаки по-прежнему использует дефекты в самом приложении, но обычно включает какое-либо взаимодействие с другим пользователем для компрометации операций этого пользователя с уязвимым приложением. Эта тенденция воспроизводится и в других областях безопасности программного обеспечения. По мере созревания осведомленности об угрозах безопасности недостатки на стороне сервера первыми хорошо понимаются и устраняются, оставляя клиентскую сторону ключевым полем битвы по мере продолжения процесса обучения. Из всех атак, описанных в этой книге, атаки на других пользователей развиваются быстрее всего, и в последние годы они были в центре большинства исследований.
        </WrappedP>
        <WrappedP>
          Различные недавние тенденции в технологиях несколько изменили ландшафт веб-приложений. Популярное сознание этих тенденций существует посредством различных довольно вводящих в заблуждение модных словечек, наиболее заметными из которых являются следующие:
        </WrappedP>
        <WrappedUl items={[
          "Веб 2.0 — этот термин относится к более широкому использованию функциональности, обеспечивающей создание пользовательского контента и обмен информацией, а также к внедрению различных технологий, которые в целом поддерживают эту функциональность, включая асинхронные HTTP-запросы и междоменную интеграцию.",
          "Облачные вычисления — этот термин относится к более широкому использованию внешних поставщиков услуг для различных частей технологического стека, включая прикладное программное обеспечение, платформы приложений, программное обеспечение веб-серверов, базы данных и оборудование. Он также относится к более широкому использованию технологий виртуализации в средах хостинга."
        ]} />
        <WrappedP>
          Как и в случае большинства изменений в технологиях, эти тенденции принесли с собой некоторые новые атаки и вариации существующих атак. Несмотря на шумиху, поднятые вопросы не так революционны, как могут показаться на первый взгляд. Мы рассмотрим последствия этих и других недавних тенденций для безопасности в соответствующих местах этой книги.
        </WrappedP>
        <WrappedP>
          Несмотря на все изменения, произошедшие в веб-приложениях, некоторые категории «классических» уязвимостей не показывают признаков уменьшения. Они продолжают возникать практически в той же форме, что и в самые ранние дни веба. К ним относятся дефекты в бизнес-логике, неспособность правильно применять контроль доступа и другие проблемы проектирования. Даже в мире собранных воедино компонентов приложений и «все-как-услуга» эти вечные проблемы, вероятно, останутся широко распространенными.
        </WrappedP>

        <WrappedH3>Резюме</WrappedH3>
        <WrappedP>
          За немногим более десятилетия Всемирная паутина превратилась из чисто статических информационных хранилищ в высокофункциональные приложения, которые обрабатывают конфиденциальные данные и выполняют мощные действия с реальными последствиями. В ходе этого развития несколько факторов способствовали формированию слабой системы безопасности, которую демонстрирует большинство современных веб-приложений.
        </WrappedP>
        <WrappedP>
          Большинство приложений сталкиваются с основной проблемой безопасности, заключающейся в том, что пользователи могут вводить произвольные данные. Каждый аспект взаимодействия пользователя с приложением может быть вредоносным и должен рассматриваться как таковой, если не доказано обратное. Неспособность должным образом решить эту проблему может сделать приложения уязвимыми для атак многочисленными способами.
        </WrappedP>
        <WrappedP>
          Все данные о текущем состоянии безопасности веб-приложений указывают на то, что, хотя некоторые аспекты безопасности действительно улучшились, на смену им пришли совершенно новые угрозы. Общая проблема не была решена в каком-либо значительном масштабе. Атаки на веб-приложения по-прежнему представляют серьезную угрозу как для организаций, которые их развертывают, так и для пользователей, которые к ним обращаются.
        </WrappedP>
      </article>
    </>
  );
}


    