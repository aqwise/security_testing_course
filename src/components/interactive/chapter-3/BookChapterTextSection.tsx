
'use client';

import { P, H2, H3, Ul } from '@/components/content/ContentPageLayout';
import { CodeBlock } from '@/components/content/CodeBlock';
import Image from 'next/image';

// TODO: Replace with actual image paths or remove if not needed
const placeholderImage = "https://placehold.co/600x400.png";

export function BookChapterTextSection() {
  return (
    <article className="prose prose-lg mx-auto max-w-3xl py-8 dark:prose-invert">
      <H2>Технологии веб-приложений</H2>
      <P>
        Веб-приложения используют множество технологий для реализации своей функциональности. Эта глава представляет собой краткое введение в ключевые технологии, с которыми вы, вероятно, столкнетесь при атаке на веб-приложения. Мы рассмотрим протокол HTTP, технологии, обычно используемые на стороне сервера и клиента, а также схемы кодирования, используемые для представления данных в различных ситуациях. Эти технологии, как правило, легки для понимания, и знание их соответствующих особенностей является ключом к проведению эффективных атак на веб-приложения.
      </P>
      <P>
        Если вы уже знакомы с ключевыми технологиями, используемыми в веб-приложениях, вы можете бегло просмотреть эту главу, чтобы убедиться, что она не предлагает вам ничего нового. Если вы все еще изучаете, как работают веб-приложения, вам следует прочитать эту главу, прежде чем переходить к последующим главам о конкретных уязвимостях. Для дальнейшего чтения по многим из затронутых областей мы рекомендуем «HTTP: The Definitive Guide» Дэвида Гурли и Брайана Тотти (O’Reilly, 2002), а также веб-сайт Консорциума Всемирной паутины по адресу www.w3.org.
      </P>

      <H3>Протокол HTTP</H3>
      <P>
        Протокол передачи гипертекста (HTTP) — это основной протокол связи, используемый для доступа ко Всемирной паутине, и он используется всеми современными веб-приложениями. Это простой протокол, который изначально был разработан для извлечения статических текстовых ресурсов. С тех пор он был расширен и использован различными способами, чтобы обеспечить поддержку сложных распределенных приложений, которые сейчас стали обычным явлением.
      </P>
      <P>
        HTTP использует модель на основе сообщений, в которой клиент отправляет сообщение-запрос, а сервер возвращает сообщение-ответ. Протокол по своей сути не имеет установленного соединения: хотя HTTP использует протокол TCP с отслеживанием состояния в качестве своего транспортного механизма, каждый обмен запросом и ответом является автономной транзакцией и может использовать разное TCP-соединение.
      </P>

      <H3>HTTP-запросы</H3>
      <P>
        Все HTTP-сообщения (запросы и ответы) состоят из одного или нескольких заголовков, каждый на отдельной строке, за которыми следует обязательная пустая строка, а затем необязательное тело сообщения. Типичный HTTP-запрос выглядит следующим образом:
      </P>
      <CodeBlock code={`GET /auth/488/YourDetails.ashx?uid=129 HTTP/1.1
Accept: application/x-ms-application, image/jpeg, application/xaml+xml, image/gif, image/pjpeg, application/x-ms-xbap, application/x-shockwaveflash, */*
Referer: https://mdsec.net/auth/488/Home.ashx
Accept-Language: en-GB
User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; InfoPath.3; .NET4.0E; FDM; .NET CLR 1.1.4322)
Accept-Encoding: gzip, deflate
Host: mdsec.net
Connection: Keep-Alive
Cookie: SessionId=5B70C71F3FD4968935CDB6682E545476`} />
      <P>
        Первая строка каждого HTTP-запроса состоит из трех элементов, разделенных пробелами:
      </P>
      <Ul items={[
        "Глагол, указывающий метод HTTP. Наиболее часто используемый метод — GET, функция которого заключается в извлечении ресурса с веб-сервера. Запросы GET не имеют тела сообщения, поэтому после пустой строки после заголовков сообщения нет никаких дополнительных данных.",
        "Запрашиваемый URL. URL обычно функционирует как имя запрашиваемого ресурса вместе с необязательной строкой запроса, содержащей параметры, которые клиент передает этому ресурсу. Строка запроса обозначается символом ? в URL. В примере содержится один параметр с именем uid и значением 129.",
        "Используемая версия HTTP. Единственными версиями HTTP, широко используемыми в Интернете, являются 1.0 и 1.1, и большинство браузеров по умолчанию используют версию 1.1. Между спецификациями этих двух версий есть несколько различий; однако единственное различие, с которым вы, вероятно, столкнетесь при атаке на веб-приложения, заключается в том, что в версии 1.1 заголовок запроса Host является обязательным."
      ]} />
      <P>Вот еще несколько интересных моментов в примере запроса:</P>
      <Ul items={[
        "Заголовок Referer используется для указания URL-адреса, с которого был сделан запрос (например, потому что пользователь нажал на ссылку на этой странице). Обратите внимание, что этот заголовок был написан с ошибкой в оригинальной спецификации HTTP, и эта версия с ошибкой сохранилась с тех пор.",
        "Заголовок User-Agent используется для предоставления информации о браузере или другом клиентском программном обеспечении, которое сгенерировало запрос. Обратите внимание, что большинство браузеров включают префикс Mozilla по историческим причинам. Это была строка User-Agent, используемая изначально доминирующим браузером Netscape, и другие браузеры хотели заявить веб-сайтам, что они совместимы с этим стандартом. Как и многие причуды из истории вычислительной техники, это так укоренилось, что до сих пор сохраняется, даже в текущей версии Internet Explorer, который сделал запрос, показанный в примере.",
        "Заголовок Host указывает имя хоста, которое появилось в полном URL-адресе, к которому осуществляется доступ. Это необходимо, когда на одном сервере размещено несколько веб-сайтов, поскольку URL-адрес, отправленный в первой строке запроса, обычно не содержит имени хоста.",
        "Заголовок Cookie используется для отправки дополнительных параметров, которые сервер выдал клиенту (более подробно описано далее в этой главе)."
      ]} />
      
      <H3>HTTP-ответы</H3>
      <P>Типичный HTTP-ответ выглядит следующим образом:</P>
      <CodeBlock code={`HTTP/1.1 200 OK
Date: Tue, 19 Apr 2011 09:23:32 GMT
Server: Microsoft-IIS/6.0
X-Powered-By: ASP.NET
Set-Cookie: tracking=tI8rk7joMx44S2Uu85nSWc
X-AspNet-Version: 2.0.50727
Cache-Control: no-cache
Pragma: no-cache
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 1067
...`} />
      <P>Первая строка каждого HTTP-ответа состоит из трех элементов, разделенных пробелами:</P>
      <Ul items={[
        "Используемая версия HTTP.",
        "Числовой код состояния, указывающий на результат запроса. 200 — самый распространенный код состояния; он означает, что запрос был успешным и что запрашиваемый ресурс возвращается.",
        "Текстовая «фраза-причина», дополнительно описывающая статус ответа. Она может иметь любое значение и не используется для каких-либо целей современными браузерами."
      ]} />
      <P>Вот еще несколько интересных моментов в ответе:</P>
      <Ul items={[
        "Заголовок Server содержит баннер, указывающий на используемое программное обеспечение веб-сервера, а иногда и другие детали, такие как установленные модули и операционная система сервера. Содержащаяся информация может быть точной или неточной.",
        "Заголовок Set-Cookie выдает браузеру дополнительный cookie; он будет отправлен обратно в заголовке Cookie последующих запросов к этому серверу.",
        "Заголовок Pragma инструктирует браузер не сохранять ответ в своем кэше. Заголовок Expires указывает, что содержимое ответа истекло в прошлом и поэтому не должно кэшироваться. Эти инструкции часто выдаются при возврате динамического контента, чтобы гарантировать, что браузеры получат свежую версию этого контента при последующих обращениях.",
        "Почти все HTTP-ответы содержат тело сообщения после пустой строки после заголовков. Заголовок Content-Type указывает, что тело этого сообщения содержит HTML-документ.",
        "Заголовок Content-Length указывает длину тела сообщения в байтах."
      ]} />

      <H3>Методы HTTP</H3>
      <P>
        При атаке на веб-приложения вы будете иметь дело почти исключительно с наиболее часто используемыми методами: GET и POST. Вам необходимо знать о некоторых важных различиях между этими методами, так как они могут повлиять на безопасность приложения, если их упустить из виду.
      </P>
      <P>
        Метод GET предназначен для извлечения ресурсов. Он может использоваться для отправки параметров запрашиваемому ресурсу в строке запроса URL. Это позволяет пользователям добавлять в закладки URL для динамического ресурса, который они могут использовать повторно. Или другие пользователи могут получить эквивалентный ресурс при последующем обращении (как в случае с добавленным в закладки поисковым запросом). URL-адреса отображаются на экране и регистрируются в различных местах, таких как история браузера и журналы доступа веб-сервера. Они также передаются в заголовке Referer на другие сайты при переходе по внешним ссылкам. По этим причинам строка запроса не должна использоваться для передачи какой-либо конфиденциальной информации.
      </P>
      <P>
        Метод POST предназначен для выполнения действий. С помощью этого метода параметры запроса могут быть отправлены как в строке запроса URL, так и в теле сообщения. Хотя URL-адрес все еще можно добавить в закладки, любые параметры, отправленные в теле сообщения, будут исключены из закладки. Эти параметры также будут исключены из различных мест, где ведутся журналы URL-адресов, и из заголовка Referer. Поскольку метод POST предназначен для выполнения действий, если пользователь нажимает кнопку «Назад» в браузере, чтобы вернуться на страницу, к которой был получен доступ с помощью этого метода, браузер не выполняет повторный запрос автоматически. Вместо этого он предупреждает пользователя о том, что собирается сделать. Это предотвращает непреднамеренное выполнение пользователем действия более одного раза. По этой причине запросы POST всегда следует использовать при выполнении какого-либо действия.
      </P>
      <P>В дополнение к методам GET и POST, протокол HTTP поддерживает множество других методов, которые были созданы для конкретных целей. Вот другие методы, о которых вам, скорее всего, потребуется знать:</P>
      <Ul items={[
        "HEAD функционирует так же, как и запрос GET, за исключением того, что сервер не должен возвращать тело сообщения в своем ответе. Сервер должен вернуть те же заголовки, которые он вернул бы на соответствующий запрос GET. Следовательно, этот метод можно использовать для проверки наличия ресурса перед выполнением запроса GET для него.",
        "TRACE предназначен для диагностических целей. Сервер должен вернуть в теле ответа точное содержимое полученного им сообщения запроса. Это можно использовать для обнаружения влияния любых прокси-серверов между клиентом и сервером, которые могут манипулировать запросом.",
        "OPTIONS просит сервер сообщить о доступных методах HTTP для определенного ресурса. Сервер обычно возвращает ответ, содержащий заголовок Allow, в котором перечислены доступные методы.",
        "PUT пытается загрузить указанный ресурс на сервер, используя содержимое, содержащееся в теле запроса. Если этот метод включен, вы можете использовать его для атаки на приложение, например, путем загрузки произвольного скрипта и его выполнения на сервере."
      ]} />

      <H3>URL-адреса</H3>
      <P>
        Универсальный указатель ресурса (URL) — это уникальный идентификатор для веб-ресурса, с помощью которого этот ресурс может быть получен. Формат большинства URL-адресов следующий:
      </P>
      <CodeBlock code="протокол://имя_хоста[:порт]/[путь/]файл[?параметр=значение]" />
      <P>
        Некоторые компоненты в этой схеме являются необязательными. Номер порта обычно включается только в том случае, если он отличается от стандартного, используемого соответствующим протоколом. URL-адрес, использованный для генерации HTTP-запроса, показанного ранее, выглядит следующим образом:
      </P>
      <CodeBlock code="https://mdsec.net/auth/488/YourDetails.ashx?uid=129" />
      <P>Помимо этой абсолютной формы, URL-адреса могут быть указаны относительно определенного хоста или относительно определенного пути на этом хосте. Например:</P>
      <CodeBlock code={`/auth/488/YourDetails.ashx?uid=129
YourDetails.ashx?uid=129`} />
      <P>Эти относительные формы часто используются на веб-страницах для описания навигации внутри самого веб-сайта или приложения.</P>
      <P>ПРИМЕЧАНИЕ: Вы можете встретить термин URI (универсальный идентификатор ресурса), используемый вместо URL, но на самом деле он используется только в официальных спецификациях и теми, кто хочет продемонстрировать свою педантичность.</P>
      
      <H3>REST</H3>
      <P>
        Передача репрезентативного состояния (REST) — это архитектурный стиль для распределенных систем, в котором запросы и ответы содержат представления текущего состояния ресурсов системы. Основные технологии, используемые во Всемирной паутине, включая протокол HTTP и формат URL-адресов, соответствуют архитектурному стилю REST.
      </P>
      <P>
        Хотя URL-адреса, содержащие параметры в строке запроса, сами по себе соответствуют ограничениям REST, термин «URL в стиле REST» часто используется для обозначения URL-адреса, который содержит свои параметры в пути файла URL, а не в строке запроса. Например, следующий URL-адрес, содержащий строку запроса:
      </P>
      <CodeBlock code="http://wahh-app.com/search?make=ford&model=pinto" />
      <P>соответствует следующему URL-адресу, содержащему параметры в «стиле REST»:</P>
      <CodeBlock code="http://wahh-app.com/search/ford/pinto" />

      <H3>Cookies</H3>
      <P>
        Cookies — это ключевая часть протокола HTTP, на которую полагаются большинство веб-приложений. Часто они могут использоваться как средство для эксплуатации уязвимостей. Механизм cookie позволяет серверу отправлять элементы данных клиенту, который клиент хранит и повторно отправляет серверу. В отличие от других типов параметров запроса (в строке запроса URL или в теле сообщения), cookie продолжают повторно отправляться в каждом последующем запросе без каких-либо особых действий со стороны приложения или пользователя.
      </P>
      <P>Сервер выдает cookie с помощью заголовка ответа Set-Cookie, как вы видели:</P>
      <CodeBlock code="Set-Cookie: tracking=tI8rk7joMx44S2Uu85nSWc" />
      <P>Браузер пользователя затем автоматически добавляет следующий заголовок к последующим запросам к тому же серверу:</P>
      <CodeBlock code="Cookie: tracking=tI8rk7joMx44S2Uu85nSWc" />
      <P>
        Cookies обычно состоят из пары имя/значение, как показано, но они могут состоять из любой строки, не содержащей пробела. Можно выдать несколько cookie, используя несколько заголовков Set-Cookie в ответе сервера. Они отправляются обратно на сервер в одном и том же заголовке Cookie, причем отдельные cookie разделяются точкой с запятой.
      </P>
      <P>В дополнение к фактическому значению cookie, заголовок Set-Cookie может включать любой из следующих необязательных атрибутов, которые могут использоваться для управления тем, как браузер обрабатывает cookie:</P>
      <Ul items={[
        "expires: устанавливает дату, до которой cookie действителен. Это заставляет браузер сохранять cookie в постоянном хранилище, и он повторно используется в последующих сеансах браузера до истечения срока действия. Если этот атрибут не установлен, cookie используется только в текущем сеансе браузера.",
        "domain: указывает домен, для которого действителен cookie. Это должен быть тот же домен или родительский домен, с которого получен cookie.",
        "path: указывает путь URL, для которого действителен cookie.",
        "secure: если этот атрибут установлен, cookie будет отправляться только в HTTPS-запросах.",
        "HttpOnly: если этот атрибут установлен, к cookie нельзя напрямую получить доступ через клиентский JavaScript."
      ]} />

      <H3>Коды состояния</H3>
      <P>
        Каждое сообщение HTTP-ответа должно содержать код состояния в первой строке, указывающий на результат запроса. Коды состояния делятся на пять групп в зависимости от первой цифры кода:
      </P>
      <Ul items={[
        "1xx — Информационные.",
        "2xx — Запрос был успешным.",
        "3xx — Клиент перенаправляется на другой ресурс.",
        "4xx — Запрос содержит ошибку какого-либо рода.",
        "5xx — Сервер столкнулся с ошибкой при выполнении запроса."
      ]} />
      <P>Вот коды состояния, с которыми вы, скорее всего, столкнетесь:</P>
      <Ul items={[
        "200 OK: указывает, что запрос был успешным и что тело ответа содержит результат запроса.",
        "301 Moved Permanently: постоянно перенаправляет браузер на другой URL, указанный в заголовке Location.",
        "302 Found: временно перенаправляет браузер на другой URL, указанный в заголовке Location.",
        "304 Not Modified: инструктирует браузер использовать кэшированную копию запрошенного ресурса.",
        "400 Bad Request: указывает, что клиент отправил неверный HTTP-запрос.",
        "401 Unauthorized: указывает, что сервер требует аутентификации HTTP.",
        "403 Forbidden: указывает, что никому не разрешен доступ к запрошенному ресурсу.",
        "404 Not Found: указывает, что запрошенный ресурс не существует.",
        "500 Internal Server Error: указывает, что сервер столкнулся с ошибкой при выполнении запроса.",
        "503 Service Unavailable: обычно указывает, что, хотя веб-сервер работает, приложение, к которому осуществляется доступ, не отвечает."
      ]} />
      
      <H3>HTTPS</H3>
      <P>
        Протокол HTTP использует обычный TCP в качестве своего транспортного механизма, который не зашифрован и поэтому может быть перехвачен злоумышленником. HTTPS — это по сути тот же протокол прикладного уровня, что и HTTP, но он туннелируется через безопасный транспортный механизм, Secure Sockets Layer (SSL). Это защищает конфиденциальность и целостность данных, передаваемых по сети.
      </P>

      <H3>Функциональность на стороне сервера</H3>
      <P>
        Современные веб-приложения генерируют контент динамически. Когда пользователь запрашивает динамический ресурс, ответ сервера создается на лету, и каждый пользователь может получить уникально настроенный для него контент. Динамический контент генерируется скриптами или другим кодом, выполняющимся на сервере.
      </P>
      <H3>Платформа Java</H3>
      <P>
        Платформа Java, Enterprise Edition (ранее известная как J2EE) долгое время была де-факто стандартом для крупномасштабных корпоративных приложений. Она подходит для многоуровневых и сбалансированных по нагрузке архитектур и хорошо подходит для модульной разработки и повторного использования кода.
      </P>
      <H3>ASP.NET</H3>
      <P>
        ASP.NET — это фреймворк для веб-приложений от Microsoft и прямой конкурент платформы Java. ASP.NET использует .NET Framework от Microsoft, который предоставляет виртуальную машину (Common Language Runtime) и набор мощных API.
      </P>
      <H3>PHP</H3>
      <P>
        PHP — это мощный и богатый фреймворк для разработки веб-приложений. Он часто используется в сочетании с другими бесплатными технологиями в так называемом стеке LAMP (Linux, Apache, MySQL, PHP).
      </P>
      <H3>SQL</H3>
      <P>
        Язык структурированных запросов (SQL) используется для доступа к данным в реляционных базах данных, таких как Oracle, MS-SQL Server и MySQL. Подавляющее большинство современных веб-приложений используют базы данных на основе SQL в качестве своего бэкэнд-хранилища данных.
      </P>

      <H3>Функциональность на стороне клиента</H3>
      <P>
        Для того чтобы серверное приложение могло получать пользовательский ввод и действия и представлять результаты пользователю, оно должно предоставлять пользовательский интерфейс на стороне клиента.
      </P>
      <H3>HTML</H3>
      <P>
        Основной технологией, используемой для создания веб-интерфейсов, является язык разметки гипертекста (HTML). Как и XML, HTML — это язык на основе тегов, который используется для описания структуры документов, отображаемых в браузере.
      </P>
      <H3>JavaScript</H3>
      <P>
        JavaScript — это относительно простой, но мощный язык программирования, который можно легко использовать для расширения веб-интерфейсов способами, которые невозможны при использовании только HTML.
      </P>
      <H3>Ajax</H3>
      <P>
        Ajax — это набор техник программирования, используемых на стороне клиента для создания пользовательских интерфейсов, которые стремятся имитировать плавное взаимодействие и динамическое поведение традиционных настольных приложений.
      </P>
      <H3>JSON</H3>
      <P>
        Нотация объектов JavaScript (JSON) — это простой формат передачи данных, который может использоваться для сериализации произвольных данных. Он может быть обработан непосредственно интерпретаторами JavaScript.
      </P>

      <H3>Схемы кодирования</H3>
      <P>
        Веб-приложения используют несколько различных схем кодирования для своих данных. Как протокол HTTP, так и язык HTML исторически являются текстовыми, и были разработаны различные схемы кодирования, чтобы обеспечить безопасную обработку этими механизмами необычных символов и двоичных данных.
      </P>
      <Ul items={[
        "URL-кодирование: используется для кодирования любых проблемных символов, чтобы их можно было безопасно передавать по HTTP.",
        "Unicode-кодирование: стандарт кодирования символов, предназначенный для поддержки всех систем письма в мире.",
        "HTML-кодирование: используется для представления проблемных символов, чтобы их можно было безопасно включить в HTML-документ.",
        "Base64-кодирование: позволяет безопасно представлять любые двоичные данные, используя только печатные символы ASCII."
      ]} />
    </article>
  );
}

    