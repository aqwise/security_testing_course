'use client';

import { P, H2, H3, Ul } from '@/components/content/ContentPageLayout';
import { CodeBlock } from '@/components/content/CodeBlock';
import Image from 'next/image';

export function BookChapterTextSection() {
  return (
    <article className="prose prose-lg mx-auto max-w-3xl py-8 dark:prose-invert">
      <H2>Глава 4: Картирование приложения</H2>
      <P>
        Первый шаг в процессе атаки на приложение — это сбор и изучение ключевой информации о нём, чтобы лучше понять, с чем вы имеете дело. Процесс картирования начинается с перечисления всего содержимого и всей функциональности приложения, чтобы понять, что оно делает и как себя ведет. Значительную часть этой функциональности легко определить, но некоторая её часть может быть скрытой, и её обнаружение потребует определенных предположений и удачи.
      </P>
      <P>
        После того как составлен каталог функциональности приложения, основная задача — тщательно изучить каждый аспект его поведения, его ключевые механизмы безопасности и используемые технологии (как на стороне клиента, так и на стороне сервера). Это позволит вам определить ключевую поверхность атаки (attack surface), которую предоставляет приложение, а соответственно и наиболее интересные области, на которых следует сосредоточить последующие проверки для поиска эксплуатируемых уязвимостей. Часто сам по себе процесс анализа уже может выявить уязвимости, что мы обсудим далее в этой главе.
      </P>
      <P>
        Поскольку приложения становятся все масштабнее и функциональнее, эффективное картирование является очень ценным навыком. Опытный специалист может быстро проводить первичную оценку целых областей функциональности в поиске классов уязвимостей, в противовес единичным экземплярам, и при этом вкладывать значительное время в тестирование других, конкретных областей с целью обнаружить проблему с высоким уровнем риска.
      </P>
      <P>
        В этой главе описываются практические шаги, которым необходимо следовать во время картирования приложения, различные методики и приемы, которые можно использовать для максимального повышения его эффективности, а также некоторые инструменты, которые могут помочь вам в этом процессе.
      </P>

      <H3>Перечисление содержимого и функциональности</H3>
      <P>
        В типичном приложении большую часть содержимого и функциональности можно определить посредством ручного просмотра страниц. Основной подход заключается в том, чтобы обойти приложение, начиная с главной страницы, переходя по каждой ссылке и проходя через все многоэтапные функции (такие как регистрация пользователя или восстановление пароля). Если в приложении есть «карта сайта», она может послужить полезной отправной точкой для перечисления содержимого.
      </P>
      <P>
        Однако, чтобы провести тщательное исследование перечисленного содержимого и получить исчерпывающую запись всего, что было обнаружено, вы должны применять более продвинутые методики, чем простой просмотр страниц.
      </P>

      <H3>Спайдеринг (Web Spidering)</H3>
      <P>
        Существуют различные инструменты для автоматизированного спайдеринга веб-сайтов. Эти инструменты работают по следующему принципу: они запрашивают веб-страницу, выполняют её парсинг в поиске ссылок на другой контент, запрашивают этот контент по найденным ссылкам и продолжают процесс рекурсивно, пока не перестают обнаруживать новый контент.
      </P>
      <P>
        Развивая эту базовую функцию, веб-пауки стремятся достичь более высокого уровня покрытия. Для этого они также выполняют парсинг HTML-форм и отправляют их обратно в приложение, используя различные заранее заданные или случайные значения. Это позволяет им проходить через многоэтапную функциональность и следовать навигации на основе форм (например, там, где выпадающие списки используются в качестве меню). Некоторые инструменты также парсят клиентский JavaScript для извлечения URL-адресов, указывающих на дополнительный контент. Существует множество бесплатных инструментов, которые хорошо справляются с задачей перечисления содержимого и функциональности приложения, включая Burp Suite, WebScarab, Zed Attack Proxy и CAT (подробнее см. в Главе 20).
      </P>
      <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border-l-4 border-primary my-6">
        <P><strong>ПОДСКАЗКА:</strong> Многие веб-серверы содержат в корневом каталоге файл robots.txt, в котором перечислены URL-адреса, которые администрация сайта не хочет, чтобы посещали веб-пауки или индексировали поисковые системы. Иногда этот файл содержит ссылки на чувствительную функциональность, в обходе которой вы определенно заинтересованы. Некоторые инструменты для спайдеринга, разработанные для атак на веб-приложения, проверяют наличие файла robots.txt и используют все URL-адреса из него в качестве отправных точек (seeds) для процесса обхода. В этом случае файл robots.txt может оказаться контрпродуктивным для безопасности веб-приложения.</P>
      </div>
      <P>
        В этой главе для демонстрации обычных действий по картированию приложения используется вымышленное приложение Extreme Internet Shopping (EIS). На рисунке 4-1 показана работа Burp Spider с приложением EIS. Без входа в систему удается скартировать каталог /shop и две новостные статьи в каталоге /media. Также обратите внимание, что файл robots.txt, показанный на рисунке, ссылается на каталоги /mdsecportal и /site-old. На них нет ссылок ни из одного раздела приложения, и они не были бы проиндексированы пауком, который переходит только по ссылкам из опубликованного контента.
      </P>
      <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border-l-4 border-primary my-6">
        <P><strong>ПОДСКАЗКА:</strong> Приложения, использующие URL-адреса в стиле REST, применяют части пути URL-адреса для уникальной идентификации данных и других ресурсов, используемых в приложении (подробнее см. в Главе 3). В таких ситуациях традиционное представление приложения пауком, основанное на URL, оказывается полезным. В приложении EIS пути /shop и /pub используют URL в стиле REST, и спайдеринг этих областей легко выявляет уникальные ссылки на элементы, доступные по этим путям.</P>
      </div>
      <figure className="my-8 text-center">
        <Image
          src="https://placehold.co/800x400.png"
          alt="Картирование части приложения с помощью Burp Spider"
          width={800}
          height={400}
          className="rounded-lg shadow-lg mx-auto"
          data-ai-hint="burp suite sitemap"
        />
        <figcaption className="mt-2 text-sm text-muted-foreground italic">
          Рисунок 4-1: Картирование части приложения с помощью Burp Spider
        </figcaption>
      </figure>
      <P>
        Хотя такой полностью автоматизированный подход к перечислению контента часто бывает эффективным, у него есть несколько существенных ограничений:
      </P>
      <Ul items={[
        "Нестандартные механизмы навигации (такие как меню, динамически создаваемые и управляемые сложным кодом на JavaScript) часто некорректно обрабатываются этими инструментами, из-за чего они могут пропустить целые разделы приложения.",
        "Ссылки, встроенные в скомпилированные клиентские объекты, такие как Flash или Java-апплеты, могут быть не замечены пауком.",
        "Многоэтапная функциональность часто реализует детальные проверки вводимых данных, которые не принимают значения, отправляемые автоматизированным инструментом. Например, форма регистрации пользователя может содержать поля для имени, адреса электронной почты, номера телефона и почтового индекса. Автоматизированный паук обычно отправляет одну и ту же тестовую строку в каждое редактируемое поле формы, а приложение возвращает сообщение об ошибке, гласящее, что один или несколько отправленных элементов недействительны. Поскольку паук недостаточно «умен», чтобы понять это сообщение и отреагировать на него, он не может продвинуться дальше формы регистрации и, следовательно, не обнаруживает никакой другой контент или функции, доступные за ней.",
        "Автоматизированные пауки обычно используют URL-адреса в качестве идентификаторов уникального контента. Чтобы избежать бесконечного обхода, они распознают, когда контент по ссылке уже был запрошен, и не запрашивают его повторно. Однако многие приложения используют навигацию на основе форм, где один и тот же URL может возвращать совершенно разный контент и функции. Например, банковское приложение может реализовывать каждое действие пользователя через POST-запрос к /account.jsp и использовать параметры для передачи информации о выполняемом действии. Если паук откажется делать несколько запросов к этому URL, он пропустит большую часть контента приложения. Некоторые пауки пытаются справиться с этой ситуацией. Например, Burp Spider можно настроить так, чтобы он различал отправки форм на основе имен и значений параметров. Тем не менее, все равно могут оставаться ситуации, когда полностью автоматизированный подход не является абсолютно эффективным. Подходы к картированию такого рода функциональности мы обсудим позже в этой главе.",
        "В противоположность предыдущему пункту, некоторые приложения помещают в URL-адреса изменчивые данные, которые на самом деле не используются для идентификации ресурсов или функций (например, параметры, содержащие таймеры или начальные значения для генератора случайных чисел). Каждая страница приложения может содержать то, что выглядит как новый набор URL-адресов, которые паук должен запросить, что приводит к его бесконечной работе.",
        "В случаях, когда приложение использует аутентификацию, эффективный паук должен уметь справляться с ней, чтобы получить доступ к функциональности, которую она защищает. Упомянутые ранее пауки могут этого достичь, если вручную настроить их, предоставив либо токен для аутентифицированной сессии, либо учетные данные для отправки в функцию входа. Однако даже при этом часто оказывается, что работа паука по разным причинам нарушает аутентифицированную сессию:",
        "Переходя по всем URL-адресам, паук в какой-то момент запросит функцию выхода (logout), что приведет к разрыву его сессии.",
        "Если паук отправит недействительные данные в чувствительную функцию, приложение может в качестве защитной меры завершить сессию.",
        "Если приложение использует токены для каждой страницы (per-page tokens), паук почти наверняка не сможет обработать их должным образом, запрашивая страницы не в ожидаемой последовательности, что, вероятно, приведет к завершению всей сессии."
      ]} />

      <div className="bg-red-50 dark:bg-red-900/20 p-4 rounded-lg border-l-4 border-destructive my-6">
        <P><strong>ПРЕДУПРЕЖДЕНИЕ:</strong> В некоторых приложениях запуск даже простого веб-паука, который парсит и запрашивает ссылки, может быть чрезвычайно опасен. Например, приложение может содержать административную функциональность, которая удаляет пользователей, останавливает базу данных, перезагружает сервер и тому подобное. Если используется паук, способный взаимодействовать с функциональностью приложения, может быть нанесен огромный ущерб, если он обнаружит и воспользуется чувствительными функциями. Авторы сталкивались с приложением, которое включало функциональность системы управления контентом (CMS) для редактирования содержимого основного сайта. Эту функциональность можно было обнаружить через карту сайта, и она не была защищена никаким контролем доступа. Если бы на этом сайте запустили автоматизированного паука, он бы нашел функцию редактирования и начал отправлять произвольные данные, что привело бы к дефейсу основного веб-сайта в реальном времени, прямо во время работы паука.</P>
      </div>

      <H3>Спайдеринг под управлением пользователя (User-Directed Spidering)</H3>
      <P>
        Это более сложная и контролируемая методика, которая обычно предпочтительнее автоматического спайдеринга. Здесь пользователь обходит приложение обычным способом с помощью стандартного браузера, пытаясь пройти через всю его функциональность. В процессе работы весь трафик проходит через инструмент, совмещающий в себе перехватывающий прокси (intercepting proxy) и паука, который отслеживает все запросы и ответы. Этот инструмент строит карту приложения, включая в нее все URL-адреса, посещенные браузером. Он также парсит все ответы приложения — точно так же, как это делает обычный паук, способный анализировать приложение, — и обновляет карту сайта, добавляя обнаруженный контент и функциональность. Пауки в составе Burp Suite и WebScarab могут использоваться таким образом (подробнее см. в Главе 20).
      </P>
      <P>
        По сравнению с базовым подходом к спайдерингу эта методика предлагает многочисленные преимущества:
      </P>
      <Ul items={[
        "Если приложение использует необычные или сложные механизмы навигации, пользователь может работать с ними через браузер обычным способом. Любые функции и контент, к которым обратился пользователь, обрабатываются инструментом (прокси/пауком).",
        "Пользователь контролирует все данные, отправляемые в приложение, и может гарантировать, что требования по валидации данных соблюдены.",
        "Пользователь может войти в приложение обычным способом и следить за тем, чтобы аутентифицированная сессия оставалась активной на протяжении всего процесса картирования. Если какое-либо действие приводит к завершению сессии, пользователь может войти снова и продолжить просмотр.",
        "Любая опасная функциональность, например deleteUser.jsp, будет полностью перечислена и добавлена в карту сайта прокси-сервера, поскольку ссылки на нее будут извлечены из ответов приложения путем парсинга. Но при этом пользователь может действовать по своему усмотрению, решая, какие функции действительно запрашивать или выполнять."
      ]} />
      <P>
        На сайте Extreme Internet Shopping ранее паук не мог проиндексировать никакое содержимое в разделе /home, поскольку этот контент требует аутентификации. Запросы к /home приводят к следующему ответу:
      </P>
      <CodeBlock code={`HTTP/1.1 302 Moved Temporarily
Date: Mon, 24 Jan 2011 16:13:12 GMT
Server: Apache
Location: /auth/Login?ReturnURL=/home/`} />
      <P>
        При спайдеринге под управлением пользователя пользователь может просто войти в приложение через свой браузер, и инструмент (прокси/паук) подхватит полученную сессию и определит весь дополнительный контент, который теперь доступен пользователю. На рисунке 4-2 показана карта сайта EIS после того, как пользователь успешно прошел аутентификацию и получил доступ к защищенным областям приложения.
      </P>
      <figure className="my-8 text-center">
        <Image
          src="https://placehold.co/800x400.png"
          alt="Карта сайта Burp после выполнения спайдеринга под управлением пользователя"
          width={800}
          height={400}
          className="rounded-lg shadow-lg mx-auto"
          data-ai-hint="burp suite sitemap user directed"
        />
        <figcaption className="mt-2 text-sm text-muted-foreground italic">
          Рисунок 4-2: Карта сайта Burp после выполнения спайдеринга под управлением пользователя
        </figcaption>
      </figure>
      <P>
        В результате обнаруживаются некоторые дополнительные ресурсы в меню раздела /home. На рисунке показана ссылка на личный профиль, доступ к которому осуществляется через функцию JavaScript, запускаемую с помощью обработчика событий onClick:
      </P>
      <CodeBlock code={`<a href=”#” onclick=”ui_nav(‘profile’)”>private profile</a>`} />
      <P>
        Обычный веб-паук, который просто переходит по ссылкам в HTML, скорее всего, пропустит ссылку такого типа. Даже самые продвинутые автоматизированные краулеры приложений сильно отстают от многочисленных навигационных механизмов, используемых в современных приложениях и расширениях для браузера. Однако при спайдеринге под управлением пользователя пользователю нужно просто перейти по видимой на экране ссылке с помощью своего браузера, и инструмент (прокси/паук) добавит полученный контент в карту сайта.
      </P>
      <P>
        С другой стороны, обратите внимание, что паук успешно определил ссылку на /core/sitestats, содержащуюся в HTML-комментарии, хотя эта ссылка и не отображается пользователю на экране.
      </P>
      <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border-l-4 border-primary my-6">
        <P><strong>ПОДСКАЗКА:</strong> В дополнение к только что описанным инструментам (прокси/паук), еще одной категорией инструментов, часто полезных при картировании приложения, являются различные расширения для браузера, которые могут выполнять анализ HTTP и HTML прямо из интерфейса браузера. Например, инструмент IEWatch, показанный на Рисунке 4-3, который работает в Microsoft Internet Explorer, отслеживает все детали запросов и ответов, включая заголовки, параметры запроса и cookie. Он анализирует каждую страницу приложения для отображения ссылок, скриптов, форм и компонентов «толстого клиента». Конечно, всю эту информацию можно просмотреть и в вашем перехватывающем прокси, но наличие второй записи с полезными данными для картирования может только помочь вам лучше понять приложение и перечислить всю его функциональность. Смотрите Главу 20 для получения дополнительной информации об инструментах такого рода.</P>
      </div>
      <figure className="my-8 text-center">
        <Image
          src="https://placehold.co/800x400.png"
          alt="IEWatch выполняет анализ HTTP и HTML прямо из браузера"
          width={800}
          height={400}
          className="rounded-lg shadow-lg mx-auto"
          data-ai-hint="browser extension developer tools"
        />
        <figcaption className="mt-2 text-sm text-muted-foreground italic">
          Рисунок 4-3: IEWatch выполняет анализ HTTP и HTML прямо из браузера
        </figcaption>
      </figure>

      <H3>Практические шаги</H3>
      <Ul items={[
        "Настройте ваш браузер на использование Burp или WebScarab в качестве локального прокси-сервера (если вы не уверены, как это сделать, обратитесь к Главе 20 за подробностями).",
        "Обойдите все приложение в обычном режиме, пытаясь посетить каждую обнаруженную ссылку/URL, отправляя каждую форму и проходя все многоэтапные функции до конца. Попробуйте просматривать сайт с включенным и выключенным JavaScript, а также с включенными и выключенными cookie. Многие приложения могут по-разному обрабатывать различные конфигурации браузера, и вы можете обнаружить разный контент и разные ветки кода внутри приложения.",
        "Изучите карту сайта, созданную прокси/пауком, и определите любой контент или функции приложения, которые вы не просматривали вручную. Установите, каким образом паук перечислил каждый элемент. Например, в Burp Spider проверьте детали в разделе \"Linked From\" (Ссылка из). Используя свой браузер, обратитесь к этому элементу вручную, чтобы ответ от сервера был обработан (спарсен) прокси/пауком для выявления любого дополнительного контента. Продолжайте этот шаг рекурсивно, пока не перестанете обнаруживать новый контент или функциональность.",
        "Опционально: дайте команду инструменту активно просканировать сайт пауком, используя весь уже перечисленный контент в качестве отправной точки. Для этого сначала определите любые URL-адреса, которые являются опасными или могут нарушить сессию приложения, и настройте паука так, чтобы он исключил их из своей области сканирования. Запустите паука и просмотрите результаты на предмет обнаружения дополнительного контента.",
        "Карта сайта, созданная прокси/пауком, содержит массу ценной информации о целевом приложении, которая пригодится в дальнейшем для определения различных поверхностей атаки, предоставляемых приложением."
      ]}/>
      
      <H3>Обнаружение скрытого контента (Discovering Hidden Content)</H3>
      <P>
        Часто бывает, что приложения содержат контент и функциональность, на которые нет прямых ссылок или к которым нельзя получить доступ из основного видимого содержимого. Распространенный пример — это функциональность, которая была реализована для целей тестирования или отладки и так и не была удалена.
      </P>
      <P>
        Другой пример возникает, когда приложение предоставляет разную функциональность разным категориям пользователей (например, анонимным пользователям, аутентифицированным обычным пользователям и администраторам). Пользователи с одним уровнем привилегий, выполняющие исчерпывающий обход приложения пауком, могут пропустить функциональность, видимую пользователям других уровней. Злоумышленник, обнаруживший такую функциональность, может оказаться в состоянии использовать ее для повышения своих привилегий в приложении.
      </P>
      <P>
        Существует бесчисленное множество других случаев, в которых может существовать интересный контент и функциональность, которые не удалось бы выявить с помощью описанных ранее методов картирования:
      </P>
      <Ul items={[
        "Резервные копии рабочих файлов. В случае с динамическими страницами их расширение файла могло быть изменено на такое, которое не сопоставлено как исполняемое, что позволяет вам просмотреть исходный код страницы на предмет уязвимостей, которые затем можно будет проэксплуатировать на рабочей версии страницы.",
        "Резервные архивы, которые содержат полный снимок файлов внутри (или даже за пределами) корневого каталога веб-сервера, что потенциально позволяет вам легко определить весь контент и функциональность приложения.",
        "Новая функциональность, которая была развернута на сервере для тестирования, но на которую еще не ведут ссылки из основного приложения.",
        "Стандартная функциональность в готовом (\"коробочном\") приложении, которая была поверхностно скрыта от пользователя, но все еще присутствует на сервере.",
        "Старые версии файлов, которые не были удалены с сервера. В случае с динамическими страницами они могут содержать уязвимости, которые были исправлены в текущей версии, но все еще могут быть проэксплуатированы в старой.",
        "Конфигурационные и подключаемые (include) файлы, содержащие чувствительные данные, такие как учетные данные для доступа к базе данных.",
        "Исходные файлы, из которых была скомпилирована функциональность рабочего приложения.",
        "Комментарии в исходном коде, которые в крайних случаях могут содержать такую информацию, как имена пользователей и пароли, но чаще предоставляют сведения о состоянии приложения. Ключевые фразы, такие как \"протестировать эту функцию\" или нечто подобное, являются верными индикаторами того, где стоит начинать поиск уязвимостей.",
        "Лог-файлы, которые могут содержать чувствительную информацию, такую как действительные имена пользователей, токены сессий, посещенные URL-адреса и выполненные действия."
      ]} />
      <P>
        Эффективное обнаружение скрытого контента требует сочетания автоматизированных и ручных методик и часто зависит от определенной доли удачи.
      </P>

      <H3>Методы перебора (брутфорс) (Brute-Force Techniques)</H3>
      <P>
        В Главе 14 описывается, как можно использовать автоматизированные методики для ускорения практически любой атаки на приложение. В текущем контексте сбора информации автоматизацию можно применять для отправки огромного количества запросов к веб-серверу в попытке угадать имена или идентификаторы скрытой функциональности.
      </P>
      <P>
        Например, предположим, что в результате спайдеринга под управлением пользователя вы обнаружили следующее содержимое приложения:
      </P>
      <CodeBlock code={`http://eis/auth/Login
http://eis/auth/ForgotPassword
http://eis/home/
http://eis/pub/media/100/view
http://eis/images/eis.gif
http://eis/include/eis.css`} />
      <P>
        Первый шаг в автоматизированных попытках выявить скрытый контент может включать следующие запросы для обнаружения дополнительных каталогов:
      </P>
      <CodeBlock code={`http://eis/About/
http://eis/abstract/
http://eis/academics/
http://eis/accessibility/
http://eis/accounts/
http://eis/action/
...`} />
      <P>
        Инструмент Burp Intruder можно использовать для перебора по списку распространенных имен каталогов и сбора подробной информации об ответах сервера, которую затем можно проанализировать для выявления существующих каталогов. На Рисунке 4-4 показана настройка Burp Intruder для поиска распространенных каталогов, расположенных в корневом каталоге веб-сервера.
      </P>
      <figure className="my-8 text-center">
        <Image
          src="https://placehold.co/800x400.png"
          alt="Настройка Burp Intruder для поиска распространенных каталогов"
          width={800}
          height={400}
          className="rounded-lg shadow-lg mx-auto"
          data-ai-hint="burp suite intruder setup"
        />
        <figcaption className="mt-2 text-sm text-muted-foreground italic">
          Рисунок 4-4: Настройка Burp Intruder для поиска распространенных каталогов
        </figcaption>
      </figure>
      <P>
        После того как атака выполнена, нажатие на заголовки столбцов, таких как «status» (статус) и «length» (длина), сортирует результаты соответствующим образом, позволяя вам быстро определить список потенциальных дополнительных ресурсов, как показано на Рисунке 4-5.
      </P>
      <figure className="my-8 text-center">
        <Image
          src="https://placehold.co/800x400.png"
          alt="Burp Intruder показывает результаты атаки по перебору каталогов"
          width={800}
          height={400}
          className="rounded-lg shadow-lg mx-auto"
          data-ai-hint="burp suite intruder results"
        />
        <figcaption className="mt-2 text-sm text-muted-foreground italic">
          Рисунок 4-5: Burp Intruder показывает результаты атаки по перебору каталогов
        </figcaption>
      </figure>
      <P>
        Выполнив перебор каталогов и подкаталогов, вы, возможно, захотите найти дополнительные страницы в приложении. Особый интерес представляет каталог /auth, содержащий ресурс Login, который был обнаружен в процессе спайдеринга, и который, вероятно, является хорошей отправной точкой для неаутентифицированного злоумышленника. И снова, вы можете запросить серию файлов внутри этого каталога:
      </P>
      <CodeBlock code={`http://eis/auth/About/
http://eis/auth/Aboutus/
http://eis/auth/AddUser/
http://eis/auth/Admin/
http://eis/auth/Administration/
http://eis/auth/Admins/
...`} />
      <figure className="my-8 text-center">
        <Image
          src="https://placehold.co/800x400.png"
          alt="Burp Intruder показывает результаты атаки по перебору файлов"
          width={800}
          height={400}
          className="rounded-lg shadow-lg mx-auto"
          data-ai-hint="burp suite intruder file fuzzing"
        />
        <figcaption className="mt-2 text-sm text-muted-foreground italic">
          Рисунок 4-6: Burp Intruder показывает результаты атаки по перебору файлов
        </figcaption>
      </figure>
      <P>
        На Рисунке 4-6 показаны результаты этой атаки, в ходе которой было выявлено несколько ресурсов в каталоге /auth: Login, Logout, Register, Profile. Обратите внимание, что запрос к Profile возвращает HTTP-статус с кодом 302. Это указывает на то, что доступ к этой ссылке без аутентификации перенаправляет пользователя на страницу входа. Дополнительный интерес представляет тот факт, что хотя страница Login была обнаружена во время спайдеринга, страница Register — нет. Возможно, эта дополнительная функциональность является рабочей, и злоумышленник мог бы зарегистрировать учетную запись пользователя на сайте.
      </P>
      <div className="bg-slate-100 dark:bg-slate-800/50 p-4 rounded-lg border-l-4 border-slate-500 my-6">
        <P><strong>ПРИМЕЧАНИЕ:</strong> Не следует полагать, что приложение будет отвечать кодом 200 OK, если запрашиваемый ресурс существует, и 404 Not Found, если нет. Многие приложения обрабатывают запросы к несуществующим ресурсам особым образом, часто возвращая собственное сообщение об ошибке и код ответа 200. Более того, некоторые запросы к существующим ресурсам могут получить ответ, отличный от 200. Ниже приведено краткое руководство по вероятному значению кодов ответа, с которыми вы можете столкнуться во время перебора при поиске скрытого контента:</P>
        <Ul items={[
            "302 Found — Если перенаправление (редирект) ведет на страницу входа, ресурс может быть доступен только аутентифицированным пользователям. Если редирект ведет на сообщение об ошибке, это может указывать на другую причину. Если он ведет в другое место, редирект может быть частью предполагаемой логики приложения, и это следует изучить подробнее.",
            "400 Bad Request — Приложение может использовать собственную схему именования для каталогов и файлов в URL, которой конкретный запрос не соответствует. Однако более вероятно, что используемый вами список слов (wordlist) содержит пробельные или другие недопустимые символы.",
            "401 Unauthorized или 403 Forbidden — Обычно это указывает на то, что запрашиваемый ресурс существует, но доступ к нему не может получить ни один пользователь, независимо от статуса аутентификации или уровня привилегий. Часто это происходит при запросе каталогов, и вы можете сделать вывод, что каталог существует.",
            "500 Internal Server Error — Во время обнаружения контента это обычно указывает на то, что приложение ожидает передачи определенных параметров при запросе ресурса."
        ]} />
        <P>Разнообразие возможных ответов, которые могут указывать на наличие интересного контента, означает, что сложно написать полностью автоматизированный скрипт для вывода списка существующих ресурсов. Лучший подход — собрать как можно больше информации об ответах приложения во время выполнения перебора и проанализировать ее вручную.</P>
      </div>

      <H3>Практические шаги</H3>
      <Ul items={[
        "Сделайте несколько ручных запросов к заведомо существующим и несуществующим ресурсам и определите, как сервер обрабатывает последние.",
        "Используйте карту сайта, полученную в результате спайдеринга под управлением пользователя, в качестве основы для автоматизированного обнаружения скрытого контента.",
        "Выполняйте автоматизированные запросы к распространенным именам файлов и каталогов внутри каждого каталога или пути, о существовании которых в приложении вам известно. Используйте Burp Intruder или собственный скрипт вместе со списками слов (wordlists) с распространенными именами файлов и каталогов, чтобы быстро сгенерировать большое количество запросов. Если вы определили особый способ, которым приложение обрабатывает запросы к несуществующим ресурсам (например, собственную страницу «файл не найден»), настройте Intruder или ваш скрипт так, чтобы он подсвечивал эти результаты для их последующего игнорирования.",
        "Собирайте ответы, полученные от сервера, и анализируйте их вручную для выявления существующих ресурсов.",
        "Выполняйте это упражнение рекурсивно по мере обнаружения нового контента."
      ]} />
      
      {/* ... The rest of the chapter content goes here ... */}

      <H3>Заключение</H3>
      <P>
        Картирование (Mapping) приложения — это ключевое предварительное условие для его атаки. Может возникнуть соблазн сразу «нырнуть с головой» и начать искать баги, но время, потраченное на получение твердого понимания функциональности приложения, его технологий и поверхности атаки (attack surface), в конечном итоге принесет свои плоды.
      </P>
      <P>
        Как и почти во всех аспектах взлома веб-приложений, наиболее эффективный подход заключается в использовании ручных методик, дополненных, где это уместно, контролируемой автоматизацией. Ни один полностью автоматизированный инструмент не может выполнить тщательное картирование приложения безопасным способом. Для этого вам нужно работать руками и опираться на собственный опыт. Основная методология, которую мы изложили, включает в себя следующее:
      </P>
      <Ul items={[
        "Ручной просмотр и спайдеринг под управлением пользователя (user-directed spidering) для перечисления видимого контента и функциональности приложения.",
        "Использование полного перебора (брутфорса) (brute force) в сочетании с человеческими умозаключениями и интуицией для обнаружения как можно большего количества скрытого контента.",
        "Интеллектуальный анализ приложения для определения его ключевой функциональности, поведения, механизмов безопасности и технологий.",
        "Оценка поверхности атаки (attack surface) приложения с выделением наиболее перспективных функций и моделей поведения для более сфокусированного исследования на предмет эксплуатируемых уязвимостей (exploitable vulnerabilities)."
      ]} />
    </article>
  );
}
