
import { ContentPageLayout, P, H2, H3, Ul } from '@/components/content/ContentPageLayout';
import { CodeBlock } from '@/components/content/CodeBlock';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Link from 'next/link';

const LinkStyle = "text-primary hover:text-primary/80 hover:underline";

export default function Module1Lesson2Page() {
  return (
    <ContentPageLayout
      title="Урок 2: Ваше первое уязвимое приложение – DVWA"
      subtitle="Модуль I: Основы безопасности веб-приложений"
    >
      <P>
        В этом уроке мы перейдем от теории и настройки инструментов к практике. Мы познакомимся с Damn Vulnerable Web Application (DVWA) – классическим приложением для тренировки навыков веб-безопасности. Мы развернем его с помощью Docker, настроим и применим начальные этапы методологии WAHH2 для его исследования. В завершение мы попробуем эксплуатировать одну из его уязвимостей на низком уровне сложности.
      </P>

      <H2>A. Знакомство с DVWA (Damn Vulnerable Web Application)</H2>
      <P>
        Damn Vulnerable Web Application (DVWA) – это веб-приложение, написанное на PHP и использующее базу данных MySQL (или MariaDB), которое намеренно содержит множество известных уязвимостей.<sup>20</sup> Оно было создано с несколькими целями:
      </P>
      <Ul items={[
        <><strong>Для специалистов по безопасности:</strong> предоставить легальную среду для оттачивания навыков и тестирования инструментов penetration testing.</>,
        <><strong>Для веб-разработчиков:</strong> помочь лучше понять процессы защиты веб-приложений, демонстрируя, как работают атаки.</>,
        <><strong>Для студентов и преподавателей:</strong> служить учебным пособием для изучения безопасности веб-приложений в контролируемой среде классной комнаты или самостоятельного обучения.<sup>20</sup></>
      ]} />
      <P>
        DVWA позволяет практиковаться в поиске и эксплуатации наиболее распространенных веб-уязвимостей, таких как SQL-инъекции (SQLi), межсайтовый скриптинг (XSS), внедрение команд (Command Injection), подделка межсайтовых запросов (CSRF), включение файлов (File Inclusion) и загрузка файлов (File Upload). Особенностью DVWA является возможность настройки уровней сложности (Low, Medium, High, Impossible), что позволяет постепенно усложнять задачи и изучать различные механизмы защиты и способы их обхода.<sup>12</sup>
      </P>
      <Card className="my-4 p-4 border-l-4 border-destructive bg-destructive/10">
        <P>
          <strong>Важно!</strong> DVWA является чрезвычайно уязвимым приложением. Его категорически запрещено размещать на общедоступных хостинговых серверах или любых других серверах, имеющих выход в Интернет, так как они будут немедленно скомпрометированы.<sup>20</sup> Используйте DVWA только в изолированной виртуальной среде, например, с помощью Docker на вашем локальном компьютере.
        </P>
      </Card>
      <Card className="my-4 p-4 border-l-4 border-primary bg-primary/10">
        <P>
          Несмотря на то, что DVWA может показаться "старым" по сравнению с более современными уязвимыми приложениями, оно остается очень актуальным для новичков. Его простота и наглядность в демонстрации классических веб-уязвимостей делают его отличной отправной точкой. DVWA фокусируется на базовых вариантах уязвимостей в очень понятном интерфейсе <sup>20</sup>, что позволяет легко понять механику атаки перед тем, как переходить к более сложным и запутанным приложениям, таким как OWASP Juice Shop.
        </P>
      </Card>

      <H2>B. Развертывание DVWA с использованием Docker</H2>
      <P>
        Мы будем использовать Docker для быстрого и безопасного развертывания DVWA. Существует несколько Docker-образов для DVWA. Для простоты этого урока мы воспользуемся популярным образом <code>kaakaww/dvwa-docker</code>, который легко запускается одной командой. В качестве альтернативы можно использовать официальный образ <code>digininja/DVWA</code>, но он требует Docker Compose.
      </P>
      <H3>Шаг 1: Загрузка образа (если еще не загружен)</H3>
      <P>Откройте терминал или командную строку и выполните следующую команду, чтобы загрузить образ <code>kaakaww/dvwa-docker</code> (если вы не сделали этого ранее):</P>
      <CodeBlock language="bash" code="docker pull kaakaww/dvwa-docker:latest" />
      <P>Эта команда основана на информации из.<sup>12</sup></P>

      <H3>Шаг 2: Запуск контейнера DVWA</H3>
      <P>Теперь запустим контейнер из загруженного образа:</P>
      <CodeBlock language="bash" code="docker run --rm -it -p 8080:80 kaakaww/dvwa-docker:latest" />
      <P>Разберем эту команду <sup>12</sup>:</P>
      <Ul items={[
        <><code>docker run</code>: команда для запуска нового контейнера.</>,
        <><code>--rm</code>: флаг, который указывает Docker автоматически удалить контейнер после его остановки. Это удобно для учебных целей, чтобы не накапливать остановленные контейнеры.</>,
        <><code>-it</code>: комбинация флагов <code>-i</code> (интерактивный режим, держит STDIN открытым) и <code>-t</code> (выделяет псевдо-TTY). Для данного образа это помогает видеть логи в консоли.</>,
        <><code>-p 8080:80</code>: пробрасывает порт 80 внутри контейнера (стандартный HTTP-порт, на котором работает веб-сервер DVWA) на порт 8080 вашей хост-машины. Это означает, что вы сможете получить доступ к DVWA через <Link href="http://localhost:8080" target="_blank" rel="noopener noreferrer" className={LinkStyle}>http://localhost:8080</Link>.</>,
        <><code>kaakaww/dvwa-docker:latest</code>: имя и тег образа, который мы запускаем.</>
      ]} />
      
      <H3>Альтернативный запуск официального образа digininja/DVWA (требует Docker Compose):</H3>
      <P>Если вы предпочитаете использовать официальный образ, вам понадобится Docker Compose.</P>
      <Ul items={[
        <>Склонируйте репозиторий DVWA: <CodeBlock language="bash" code="git clone https://github.com/digininja/DVWA.git" /><sup>21</sup></>,
        <>Перейдите в созданную директорию: <CodeBlock language="bash" code="cd DVWA" /></>,
        <>Запустите DVWA с помощью Docker Compose: <CodeBlock language="bash" code="docker compose up -d" /><sup>21</sup> Флаг <code>-d</code> запускает контейнеры в фоновом режиме. В этом случае DVWA будет доступен по адресу <Link href="http://localhost:4280" target="_blank" rel="noopener noreferrer" className={LinkStyle}>http://localhost:4280</Link>.<sup>21</sup></>
      ]} />

      <H3>Шаг 3: Доступ к DVWA</H3>
      <P>
        После успешного запуска контейнера откройте ваш веб-браузер (убедитесь, что он настроен на использование Burp Suite Proxy, как мы делали на Уроке 1, если вы хотите сразу анализировать трафик). В адресной строке введите:
      </P>
      <Ul items={[
        <><code className="font-mono text-sm bg-muted p-1 rounded">http://localhost:8080</code> (если вы использовали образ <code>kaakaww/dvwa-docker</code>)</>,
        <><code className="font-mono text-sm bg-muted p-1 rounded">http://localhost:4280</code> (если вы использовали официальный образ <code>digininja/DVWA</code>)</>
      ]} />
      <P>Вы должны увидеть страницу входа в DVWA.</P>

      <H3>Шаг 4: Вход в систему</H3>
      <P>Используйте следующие учетные данные по умолчанию для входа <sup>12</sup>:</P>
      <Ul items={[
        <>Username: <code className="font-mono text-sm bg-muted p-1 rounded">admin</code></>,
        <>Password: <code className="font-mono text-sm bg-muted p-1 rounded">password</code></>
      ]} />

      <H3>Шаг 5: Настройка базы данных (при первом запуске)</H3>
      <P>
        После первого входа в систему DVWA, скорее всего, потребуется настроить базу данных. На главной странице или в меню слева найдите кнопку или ссылку с текстом "Create / Reset Database" и нажмите ее.<sup>22</sup> Это действие создаст необходимые таблицы и заполнит их начальными данными. Процесс "Create / Reset Database" является важным механизмом для возвращения приложения в исходное состояние после ваших экспериментов, что очень полезно в учебной среде. При эксплуатации уязвимостей состояние приложения может меняться, и возможность быстрого сброса позволяет многократно повторять упражнения.
      </P>

      <H3>Шаг 6: Изменение уровня безопасности</H3>
      <P>
        DVWA имеет несколько уровней безопасности: Low, Medium, High и Impossible. Для начального обучения и легкой эксплуатации уязвимостей нам нужен уровень "Low".
      </P>
      <Ul items={[
        "В меню слева на странице DVWA выберите пункт \"DVWA Security\".",
        "На открывшейся странице вы увидите выпадающий список с уровнями безопасности. По умолчанию может быть установлен уровень \"Impossible\" или \"High\".",
        "Выберите \"Low\" из списка и нажмите кнопку \"Submit\"."
      ]} />
      <P>
        Теперь DVWA готово к исследованию и первым попыткам эксплуатации уязвимостей.
      </P>
      <Card className="my-4 p-4 border-l-4 border-primary bg-primary/10">
        <P>
          Существование нескольких Docker-образов для DVWA (например, <code>kaakaww/dvwa-docker</code>, <code>vulnerables/web-dvwa</code> <sup>23</sup>, официальный <code>digininja/DVWA</code>) подчеркивает популярность этого инструмента. Однако это также требует от пользователя внимательности при выборе образа, например, проверки его актуальности и поддержки. Для новичка использование простой команды <code>docker run</code> может быть предпочтительнее, чем работа с Docker Compose на самом начальном этапе.
        </P>
      </Card>
      
      <H3>Таблица 3: DVWA – Учетные данные и настройка</H3>
      <div className="overflow-x-auto my-6">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Параметр</TableHead>
              <TableHead>Значение/Действие</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            <TableRow>
              <TableCell>URL-адрес (для kaakaww/dvwa-docker)</TableCell>
              <TableCell><Link href="http://localhost:8080" target="_blank" rel="noopener noreferrer" className={LinkStyle}>http://localhost:8080</Link></TableCell>
            </TableRow>
            <TableRow>
              <TableCell>URL-адрес (для digininja/DVWA через Compose)</TableCell>
              <TableCell><Link href="http://localhost:4280" target="_blank" rel="noopener noreferrer" className={LinkStyle}>http://localhost:4280</Link></TableCell>
            </TableRow>
            <TableRow>
              <TableCell>Имя пользователя (Username)</TableCell>
              <TableCell>admin</TableCell>
            </TableRow>
            <TableRow>
              <TableCell>Пароль (Password)</TableCell>
              <TableCell>password</TableCell>
            </TableRow>
            <TableRow>
              <TableCell>Начальная настройка БД</TableCell>
              <TableCell>Нажать кнопку "Create / Reset Database" на главной странице после входа.</TableCell>
            </TableRow>
            <TableRow>
              <TableCell>Установка уровня безопасности</TableCell>
              <TableCell>В меню "DVWA Security" выбрать "Low" и нажать "Submit".</TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </div>

      <H2>C. Начальное исследование: Разведка и Картирование в DVWA (связь с WAHH2)</H2>
      <P>
        Теперь, когда DVWA запущено и настроено, давайте применим первые два этапа методологии WAHH2 – Разведку и Картирование – к нашему приложению.
      </P>
      <H3>Разведка (Reconnaissance)</H3>
      <P>На этом этапе мы собираем общую информацию. Многое нам уже известно:</P>
      <Ul items={[
        "Это PHP/MySQL приложение.",
        "Мы знаем учетные данные администратора (admin/password).",
        "Мы знаем URL-адрес для доступа."
      ]} />
      <P>В контексте уже запущенного локального приложения, пассивная разведка ограничена. Однако, если бы это было внешнее приложение, мы бы искали информацию о технологическом стеке, домене, IP-адресах и т.д.</P>

      <H3>Картирование (Mapping)</H3>
      <P>Этот этап включает активное, но неагрессивное исследование приложения для понимания его структуры и функциональности.</P>
      <H3>Изучение интерфейса:</H3>
      <P>После входа в систему внимательно изучите главную страницу и навигационное меню слева. Какие разделы (типы уязвимостей) доступны? Обычно это:</P>
      <Ul items={[
        "Brute Force", "Command Injection", "CSRF", "File Inclusion", "File Upload",
        "SQL Injection", "SQL Injection (Blind)", "XSS (DOM)", "XSS (Reflected)", "XSS (Stored)",
        "И другие, в зависимости от версии."
      ]} />
      <H3>Навигация по приложению:</H3>
      <Ul items={[
        "Перейдите по каждой ссылке в меню.",
        <>Обращайте внимание на то, как меняются URL-адреса в браузере. Какие параметры появляются в URL? Например, при переходе на страницу SQL Injection, URL может выглядеть как <code className="font-mono text-sm bg-muted p-1 rounded">http://localhost:8080/vulnerabilities/sqli/</code>.</>
      ]} />
      <H3>Использование Burp Suite для картирования:</H3>
      <Ul items={[
        "Убедитесь, что ваш браузер настроен на использование Burp Suite в качестве прокси.",
        "В Burp Suite откройте вкладку Proxy, затем подвкладку HTTP history.",
        "По мере того как вы перемещаетесь по страницам DVWA, в HTTP history будут появляться записи о всех запросах, отправленных вашим браузером, и ответах, полученных от сервера DVWA.",
        <>Для каждого запроса и ответа вы можете увидеть:
          <Ul items={[
            "Метод запроса (GET, POST)", "URL", "Код ответа сервера (200 OK, 404 Not Found и т.д.)",
            "Заголовки запроса и ответа (включая Cookies)", "Тело запроса и ответа (если есть)"
          ]} />
        </>
      ]} />
      <P>Это дает гораздо более полное представление о взаимодействии с приложением, чем просто просмотр страниц в браузере. Вы можете увидеть все передаваемые параметры, даже если они не очевидны из интерфейса.</P>
      <H3>Определение основных функциональных блоков:</H3>
      <P>Выделите ключевые элементы на каждой странице уязвимостей: формы ввода, кнопки, ссылки для загрузки файлов и т.д. Это потенциальные точки входа для атак.</P>
      <Card className="my-4 p-4 border-l-4 border-primary bg-primary/10">
        <P>
          Даже в таком простом приложении, как DVWA, этап картирования с помощью Burp Suite может выявить скрытые параметры или особенности поведения, которые не очевидны из пользовательского интерфейса. Burp Suite <sup>18</sup> делает видимыми все HTTP-взаимодействия, включая те, что инициированы AJAX-запросами или отправлены через формы, предоставляя более полную картину точек входа для атак.
        </P>
      </Card>

      <H2>D. Практическое упражнение: Эксплуатация простой уязвимости в DVWA на уровне 'Low'</H2>
      <P>
        Давайте выберем одну из классических уязвимостей в DVWA для демонстрации процесса эксплуатации на уровне сложности "Low". Возьмем, к примеру, Command Injection (Внедрение команд).
      </P>
      <H3>Шаг 1: Переход к уязвимости</H3>
      <P>В меню DVWA слева выберите пункт "Command Injection".</P>
      <H3>Шаг 2: Анализ функциональности (Обнаружение - начальный этап)</H3>
      <P>
        На странице вы увидите текстовое поле с меткой "Ping a device" и кнопку "Submit". Предполагается, что приложение берет введенный IP-адрес или доменное имя и выполняет на сервере команду ping для проверки доступности этого хоста.
      </P>
      <H3>Шаг 3: Попытка эксплуатации (Эксплуатация)</H3>
      <H3>Проверка легитимной функциональности:</H3>
      <P>Введите в поле IP-адрес <code className="font-mono text-sm bg-muted p-1 rounded">127.0.0.1</code> (это адрес самого сервера, localhost) и нажмите "Submit". Вы должны увидеть вывод команды ping, показывающий обмен пакетами с 127.0.0.1.</P>
      <H3>Попытка внедрения команды:</H3>
      <P>
        На уровне "Low" DVWA обычно слабо фильтрует пользовательский ввод. Мы можем попытаться добавить к IP-адресу еще одну команду операционной системы, используя специальный символ-разделитель.
      </P>
      <P>Для Linux-серверов (а DVWA в Docker часто работает на Linux-основе) в качестве разделителя можно использовать точку с запятой (<code className="font-mono text-sm bg-muted p-1 rounded">;</code>) или двойной амперсанд (<code className="font-mono text-sm bg-muted p-1 rounded">&&</code>).</P>
      <P>Попробуйте ввести следующее в поле IP-адреса: <code className="font-mono text-sm bg-muted p-1 rounded">127.0.0.1; ls -la</code> Эта команда сначала выполнит ping 127.0.0.1, а затем, если уязвимость присутствует, выполнит команду <code>ls -la</code>, которая выведет список файлов и директорий в текущей рабочей папке веб-сервера.</P>
      <P>Другой пример: <code className="font-mono text-sm bg-muted p-1 rounded">127.0.0.1 && whoami</code> Команда <code>whoami</code> выведет имя пользователя, от имени которого работает веб-сервер.</P>
      <P>Нажмите "Submit".</P>

      <H3>Шаг 4: Анализ результата</H3>
      <P>
        Если уязвимость Command Injection присутствует и успешно эксплуатируется, то на странице, под выводом команды ping, вы увидите результат выполнения вашей внедренной команды (например, список файлов или имя пользователя <code>www-data</code>). Это произошло потому, что приложение напрямую вставило ваш ввод в системную команду без должной очистки или экранирования специальных символов. Пример эксплуатации из <sup>22</sup> (<code className="font-mono text-sm bg-muted p-1 rounded">127.0.0.1; cat /etc/passwd</code>) демонстрирует, как можно прочитать системные файлы.
      </P>
      <H3>Использование Burp Suite для анализа (опционально для этого упражнения, но полезно для понимания):</H3>
      <Ul items={[
        "В Burp Suite на вкладке Proxy -> Intercept включите перехват (кнопка \"Intercept is on\").",
        <>В браузере на странице Command Injection в DVWA введите <code className="font-mono text-sm bg-muted p-1 rounded">127.0.0.1</code> и нажмите \"Submit\".</>,
        <>Запрос будет перехвачен в Burp Suite. Вы увидите что-то вроде: <code className="font-mono text-sm bg-muted p-1 rounded">GET /vulnerabilities/exec/?ip=127.0.0.1&Submit=Submit HTTP/1.1</code> (или POST-запрос, в зависимости от реализации DVWA).</>,
        "Щелкните правой кнопкой мыши по перехваченному запросу и выберите \"Send to Repeater\".",
        <>Перейдите на вкладку Repeater. Здесь вы можете изменять параметр <code>ip</code> (например, на <code className="font-mono text-sm bg-muted p-1 rounded">127.0.0.1; id</code>) и нажимать \"Send\" для отправки модифицированного запроса на сервер, наблюдая за ответом в панели справа. Это позволяет более гибко и контролируемо тестировать различные варианты инъекций.</>
      ]} />
      <Card className="my-4 p-4 border-l-4 border-primary bg-primary/10">
        <P>
          Успешная эксплуатация даже такой простой уязвимости, как Command Injection на уровне "Low" в DVWA, дает новичку мощное чувство выполненного долга и наглядно демонстрирует реальность веб-угроз. DVWA <sup>20</sup> предоставляет безопасную среду для такой практики. Переключение уровней сложности в DVWA (Low, Medium, High, Impossible) <sup>12</sup> является ключевой особенностью. После освоения уязвимости на уровне "Low", переход на "Medium" заставит столкнуться с базовыми мерами фильтрации, что стимулирует более глубокое изучение техник обхода и понимание контекста уязвимости.
        </P>
      </Card>

      <H2>E. Блок контроля знаний (Урок 2)</H2>
      <Card className="my-6">
        <CardContent className="p-6 space-y-4">
          <div>
            <P><strong>1. Какое основное предназначение DVWA?</strong></P>
            <Ul items={[
              "a) Быть безопасным веб-приложением для электронной коммерции.",
              "b) Предоставлять среду для изучения и практики эксплуатации веб-уязвимостей.",
              "c) Автоматически находить и исправлять уязвимости на сайтах.",
              "d) Заменять Burp Suite."
            ]} />
            <P><em className="text-primary font-semibold">Правильный ответ: b) Предоставлять среду для изучения и практики эксплуатации веб-уязвимостей.</em></P>
          </div>
          <hr />
          <div>
            <P><strong>2. Какие учетные данные используются по умолчанию для входа в DVWA?</strong></P>
            <Ul items={[
              "a) root/toor",
              "b) test/test",
              "c) admin/password",
              "d) dvwa/dvwa"
            ]} />
            <P><em className="text-primary font-semibold">Правильный ответ: c) admin/password</em></P>
          </div>
          <hr />
          <div>
            <P><strong>3. Какой уровень безопасности в DVWA рекомендуется выбрать для начального изучения уязвимостей?</strong></P>
            <Ul items={[
              "a) Impossible",
              "b) High",
              "c) Medium",
              "d) Low"
            ]} />
            <P><em className="text-primary font-semibold">Правильный ответ: d) Low</em></P>
          </div>
          <hr />
          <div>
            <P><strong>4. Если вы ввели <code className="font-mono text-sm bg-muted p-1 rounded">127.0.0.1; id</code> в поле для IP-адреса на странице Command Injection в DVWA (на Linux-сервере) и увидели вывод команды id, что это означает?</strong></P>
            <Ul items={[
              "a) Приложение безопасно и выполнило только команду ping.",
              "b) Приложение уязвимо к внедрению команд, и ваша команда id была выполнена.",
              "c) Сервер не в сети.",
              "d) Необходимо повысить уровень безопасности DVWA."
            ]} />
            <P><em className="text-primary font-semibold">Правильный ответ: b) Приложение уязвимо к внедрению команд, и ваша команда id была выполнена.</em></P>
          </div>
          <hr />
          <div>
            <P><strong>5. Какой этап методологии WAHH2 наиболее активно применяется при попытке выполнить команду <code className="font-mono text-sm bg-muted p-1 rounded">127.0.0.1; id</code> в DVWA?</strong></P>
            <Ul items={[
              "a) Разведка",
              "b) Картирование",
              "c) Обнаружение",
              "d) Эксплуатация"
            ]} />
            <P><em className="text-primary font-semibold">Правильный ответ: d) Эксплуатация</em></P>
          </div>
        </CardContent>
      </Card>
    </ContentPageLayout>
  );
}

    